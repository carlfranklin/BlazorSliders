<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.OutputCaching</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules">
            <summary>
            Represents vary-by rules.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.VaryByValues">
            <summary>
            Gets a dictionary of key-pair values to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.RouteValueNames">
            <summary>
            Gets or sets the list of route value names to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.HeaderNames">
            <summary>
            Gets or sets the list of header names to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.QueryKeys">
            <summary>
            Gets or sets the list of query string keys to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.CacheKeyPrefix">
            <summary>
            Gets or sets a prefix to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.VaryByHost">
            <summary>
            Gets or sets whether to vary by the HOST header value or not.
            </summary>
            <remarks>Default is <c>true</c></remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.IOutputCacheBufferStore">
            <summary>
            Represents a store for cached responses that uses a <see cref="T:System.Buffers.IBufferWriter`1"/> as the target.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCacheBufferStore.TryGetAsync(System.String,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)">
            <summary>
            Gets the cached response for the given key, if it exists.
            If no cached response exists for the given key, <c>null</c> is returned.
            </summary>
            <param name="key">The cache key to look up.</param>
            <param name="destination">The location to which the value should be written.</param>
            <param name="cancellationToken">Indicates that the operation should be cancelled.</param>
            <returns><c>True</c> if the response cache entry if it exists; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCacheBufferStore.SetAsync(System.String,System.Buffers.ReadOnlySequence{System.Byte},System.ReadOnlyMemory{System.String},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stores the given response in the response cache.
            </summary>
            <param name="key">The cache key to store the response under.</param>
            <param name="value">The response cache entry to store; this value is only defined for the duration of the method, and should not be stored without making a copy.</param>
            <param name="tags">The tags associated with the cache entry to store.</param>
            <param name="validFor">The amount of time the entry will be kept in the cache before expiring, relative to now.</param>
            <param name="cancellationToken">Indicates that the operation should be cancelled.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.IOutputCacheFeature">
            <summary>
            A feature for configuring additional output cache options on the HTTP response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.IOutputCacheFeature.Context">
            <summary>
            Gets the cache context.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCacheKeyProvider.CreateStorageKey(Microsoft.AspNetCore.OutputCaching.OutputCacheContext)">
            <summary>
            Create a key for storing cached responses.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheContext"/>.</param>
            <returns>The created key.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy">
            <summary>
            An implementation of this interface can update how the current request is cached.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheContext"/> before the cache middleware is invoked.
            At that point the cache middleware can still be enabled or disabled for the request.
            </summary>
            <param name="context">The current request's cache context.</param>
            <param name="cancellation">The token to monitor for cancellation requests.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheContext"/> before the cached response is used.
            At that point the freshness of the cached response can be updated.
            </summary>
            <param name="context">The current request's cache context.</param>
            <param name="cancellation">The token to monitor for cancellation requests.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheContext"/> before the response is served and can be cached.
            At that point cacheability of the response can be updated.
            </summary>
            <param name="context">The current request's cache context.</param>
            <param name="cancellation">The token to monitor for cancellation requests.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.IOutputCacheStore">
            <summary>
            Represents a store for cached responses.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCacheStore.EvictByTagAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Evicts cached responses by tag.
            </summary>
            <param name="tag">The tag to evict.</param>
            <param name="cancellationToken">Indicates that the operation should be cancelled.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCacheStore.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the cached response for the given key, if it exists.
            If no cached response exists for the given key, <c>null</c> is returned.
            </summary>
            <param name="key">The cache key to look up.</param>
            <param name="cancellationToken">Indicates that the operation should be cancelled.</param>
            <returns>The response cache entry if it exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.IOutputCacheStore.SetAsync(System.String,System.Byte[],System.String[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stores the given response in the response cache.
            </summary>
            <param name="key">The cache key to store the response under.</param>
            <param name="value">The response cache entry to store.</param>
            <param name="tags">The tags associated with the cache entry to store.</param>
            <param name="validFor">The amount of time the entry will be kept in the cache before expiring, relative to now.</param>
            <param name="cancellationToken">Indicates that the operation should be cancelled.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.LoggerExtensions">
            <summary>
            Defines the logger messages produced by output caching
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Memory.MemoryOutputCacheStore.GetAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Memory.MemoryOutputCacheStore.SetAsync(System.String,System.Byte[],System.String[],System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute">
            <summary>
            Specifies the parameters necessary for setting appropriate headers in output caching.
            </summary>
            <remarks>
            This attribute requires the output cache middleware.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.Duration">
            <summary>
            Gets or sets the duration in seconds for which the response is cached.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.NoStore">
            <summary>
            Gets or sets the value which determines whether the response should be cached or not.
            When set to <see langword="true"/>, the response won't be cached.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.VaryByQueryKeys">
            <summary>
            Gets or sets the query keys to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.VaryByHeaderNames">
            <summary>
            Gets or sets the header names to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.VaryByRouteValueNames">
            <summary>
            Gets or sets the route value names to vary by.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.Tags">
            <summary>
            Gets or sets tags to apply to the output cache.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute.PolicyName">
            <summary>
            Gets or sets the value of the cache policy name.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.OutputCacheContext">
            <summary>
            Represent the current cache context for the request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.EnableOutputCaching">
            <summary>
            Determines whether the output caching logic should be configured for the incoming HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.AllowCacheLookup">
            <summary>
            Determines whether a cache lookup is allowed for the incoming HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.AllowCacheStorage">
            <summary>
            Determines whether storage of the response is allowed for the incoming HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.AllowLocking">
            <summary>
            Determines whether the request should be locked.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.HttpContext">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.HttpContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.ResponseTime">
            <summary>
            Gets or sets the response time.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.CacheVaryByRules">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.CacheVaryByRules"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.Tags">
            <summary>
            Gets the tags of the cached response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheContext.ResponseExpirationTimeSpan">
            <summary>
            Gets or sets the amount of time the response should be cached for.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheEntry.Created">
            <summary>
            Gets the created date and time of the cache entry.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheEntry.StatusCode">
            <summary>
            Gets the status code of the cache entry.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheEntry.Headers">
            <summary>
            Gets the headers of the cache entry.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheEntry.Body">
            <summary>
            Gets the body of the cache entry.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.OutputCacheEntryFormatter">
            <summary>
            Formats <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheEntry"/> instance to match structures supported by the <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCacheStore"/> implementations.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware">
            <summary>
            Enable HTTP response caching.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.OutputCaching.OutputCacheOptions},Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.OutputCaching.IOutputCacheStore,Microsoft.Extensions.ObjectPool.ObjectPoolProvider)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware"/>.
            </summary>
            <param name="next">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate"/> representing the next middleware in the pipeline.</param>
            <param name="options">The options for this middleware.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> used for logging.</param>
            <param name="outputCache">The <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCacheStore"/> store.</param>
            <param name="poolProvider">The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/> used for creating <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool"/> instances.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the logic of the middleware.
            </summary>
            <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the middleware has completed processing.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware.FinalizeCacheHeaders(Microsoft.AspNetCore.OutputCaching.OutputCacheContext)">
            <summary>
            Finalize cache headers.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware.FinalizeCacheBodyAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext)">
            <summary>
            Stores the response body
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware.OnStartResponse(Microsoft.AspNetCore.OutputCaching.OutputCacheContext)">
            <summary>
            Mark the response as started and set the response time if no response was started yet.
            </summary>
            <param name="context"></param>
            <returns><c>true</c> if the response was not started before this call; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions">
            <summary>
            Options for configuring the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.SizeLimit">
            <summary>
            The size limit for the output cache middleware in bytes. The default is set to 100 MB.
            When this limit is exceeded, no new responses will be cached until older entries are
            evicted.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.MaximumBodySize">
            <summary>
            The largest cacheable size for the response body in bytes. The default is set to 64 MB.
            If the response body exceeds this limit, it will not be cached by the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.DefaultExpirationTimeSpan">
            <summary>
            The duration a response is cached when no specific value is defined by a policy. The default is set to 60 seconds.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.UseCaseSensitivePaths">
            <summary>
            <c>true</c> if request paths are case-sensitive; otherwise <c>false</c>. The default is to treat paths as case-insensitive.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.ApplicationServices">
            <summary>
            Gets the application <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.TimeProvider">
            <summary>
            For testing purposes only.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(System.String,Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy)">
            <summary>
            Defines a <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> which can be referenced by name.
            </summary>
            <param name="name">The name of the policy.</param>
            <param name="policy">The policy to add</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(System.String,System.Action{Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder})">
            <summary>
            Defines a <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> which can be referenced by name.
            </summary>
            <param name="name">The name of the policy.</param>
            <param name="build">An action on <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder"/>.</param>
            <remarks>The built policy will be based on the default policy.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(System.String,System.Action{Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder},System.Boolean)">
            <summary>
            Defines a <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> which can be referenced by name.
            </summary>
            <param name="name">The name of the policy.</param>
            <param name="build">An action on <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder"/>.</param>
            <param name="excludeDefaultPolicy">Whether to exclude the default policy or not.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> instance to base policies.
            </summary>
            <param name="policy">The policy to add</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(System.Action{Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder})">
            <summary>
            Builds and adds an <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> instance to base policies.
            </summary>
            <param name="build">An action on <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder"/>.</param>
            <remarks>The built policy will be based on the default policy.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(System.Action{Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder},System.Boolean)">
            <summary>
            Builds and adds an <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> instance to base policies.
            </summary>
            <param name="build">An action on <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder"/>.</param>
            <param name="excludeDefaultPolicy">Whether to exclude the default policy or not.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder">
            <summary>
            Provides helper methods to create custom policies.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.AddPolicy(System.Type)">
            <summary>
            Adds a dynamically resolved policy.
            </summary>
            <param name="policyType">The type of policy to add</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.AddPolicy``1">
            <summary>
            Adds a dynamically resolved policy.
            </summary>
            <typeparam name="T">The policy type.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.With(System.Func{Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Adds a requirement to the current policy.
            </summary>
            <param name="predicate">The predicate applied to the policy.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.With(System.Func{Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Boolean})">
            <summary>
            Adds a requirement to the current policy.
            </summary>
            <param name="predicate">The predicate applied to the policy.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByQuery(System.String,System.String[])">
            <summary>
            Adds a policy to vary the cached responses by query strings.
            </summary>
            <param name="queryKey">The query key to vary the cached responses by.</param>
            <param name="queryKeys">The extra query keys to vary the cached responses by.</param>
            <remarks>
            By default all query keys vary the cache entries. However when specific query keys are specified only these are then taken into account.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByQuery(System.String[])">
            <summary>
            Adds a policy to vary the cached responses by query strings.
            </summary>
            <param name="queryKeys">The query keys to vary the cached responses by.</param>
            <remarks>
            By default all query keys vary the cache entries. However when specific query keys are specified only these are then taken into account.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByHeader(System.String,System.String[])">
            <summary>
            Adds a policy to vary the cached responses by header.
            </summary>
            <param name="headerName">The header name to vary the cached responses by.</param>
            <param name="headerNames">Additional header names to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByHeader(System.String[])">
            <summary>
            Adds a policy to vary the cached responses by header.
            </summary>
            <param name="headerNames">The header names to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByRouteValue(System.String,System.String[])">
            <summary>
            Adds a policy to vary the cached responses by route value.
            </summary>
            <param name="routeValueName">The route value name to vary the cached responses by.</param>
            <param name="routeValueNames">The extra route value names to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByRouteValue(System.String[])">
            <summary>
            Adds a policy to vary the cached responses by route value.
            </summary>
            <param name="routeValueNames">The route value names to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetCacheKeyPrefix(System.String)">
            <summary>
            Adds a policy that varies the cache key using the specified value.
            </summary>
            <param name="keyPrefix">The value to vary the cache key by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetCacheKeyPrefix(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.String})">
            <summary>
            Adds a policy that varies the cache key using the specified value.
            </summary>
            <param name="keyPrefix">The value to vary the cache key by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetCacheKeyPrefix(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}})">
            <summary>
            Adds a policy that varies the cache key using the specified value.
            </summary>
            <param name="keyPrefix">The value to vary the cache key by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByValue(System.String,System.String)">
            <summary>
            Adds a policy to vary the cached responses by custom key/value.
            </summary>
            <param name="key">The key to vary the cached responses by.</param>
            <param name="value">The value to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByValue(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a policy to vary the cached responses by custom key/value.
            </summary>
            <param name="varyBy">The key/value to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByValue(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Collections.Generic.KeyValuePair{System.String,System.String}}})">
            <summary>
            Adds a policy that vary the cached content based on the specified value.
            </summary>
            <param name="varyBy">The key/value to vary the cached responses by.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Tag(System.String[])">
            <summary>
            Adds a policy to tag the cached response.
            </summary>
            <param name="tags">The tags to add to the cached reponse.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Expire(System.TimeSpan)">
            <summary>
            Adds a policy to change the cached response expiration.
            </summary>
            <param name="expiration">The expiration of the cached reponse.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetLocking(System.Boolean)">
            <summary>
            Adds a policy to change the request locking strategy.
            </summary>
            <param name="enabled">Whether the request should be locked.</param>
            <remarks>When the default policy is used, locking is enabled by default.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.NoCache">
            <summary>
            Clears the policies and adds one preventing any caching logic to happen.
            </summary>
            <remarks>
            The cache key will never be computed.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Cache">
            <summary>
            Enables caching for the current request if not already enabled.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.SetVaryByHost(System.Boolean)">
            <summary>
            Adds a policy setting whether to vary by the Host header ot not.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Build">
            <summary>
            Creates the <see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/>.
            </summary>
            <returns>The<see cref="T:Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy"/> instance.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy">
            <summary>
            A composite policy.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy.#ctor(Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy[])">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy"/>
            </summary>
            <param name="policies">The policies to include.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.Policies.EmptyPolicy">
            <summary>
            An empty policy.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.EmptyPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.EmptyPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.EmptyPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy">
            <summary>
            A policy that adds a requirement to another policy.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy.#ctor(System.Func{Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.Tasks.ValueTask{System.Boolean}},Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy"/> instance.
            </summary>
            <param name="asyncPredicate">The predicate.</param>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy">
            <summary>
            A type base policy.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy"/>
            </summary>
            <param name="policyType">The type of policy.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.DefaultPolicy">
            <summary>
            A policy which caches un-authenticated, GET and HEAD, 200 responses.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.DefaultPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.DefaultPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.DefaultPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.EnableCachePolicy">
            <summary>
            A policy that enables caching
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.EnableCachePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.EnableCachePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.EnableCachePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.ExpirationPolicy">
            <summary>
            A policy that defines a custom expiration duration.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.ExpirationPolicy.#ctor(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.OutputCaching.ExpirationPolicy"/> instance.
            </summary>
            <param name="expiration">The expiration duration.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.ExpirationPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.ExpirationPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.ExpirationPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.LockingPolicy">
            <summary>
            A policy that changes the locking behavior.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OutputCaching.LockingPolicy.Enabled">
            <summary>
            A policy that enables locking.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OutputCaching.LockingPolicy.Disabled">
            <summary>
            A policy that disables locking.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.LockingPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.LockingPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.LockingPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.NamedPolicy">
            <summary>
            A named policy.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NamedPolicy.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.AspNetCore.OutputCaching.NamedPolicy"/> instance.
            </summary>
            <param name="policyName">The name of the profile.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NamedPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NamedPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NamedPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.NoLookupPolicy">
            <summary>
            A policy that prevents the response from being served from cache.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NoLookupPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NoLookupPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NoLookupPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.NoStorePolicy">
            <summary>
            A policy that prevents the response from being cached.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NoStorePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NoStorePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.NoStorePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.SetCacheKeyPrefixPolicy">
            <summary>
            A policy that sets the cache key prefix using the specified value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.SetCacheKeyPrefixPolicy.#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.String}})">
            <summary>
            Creates a policy that varies the cache key using the specified value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.SetCacheKeyPrefixPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.SetCacheKeyPrefixPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.SetCacheKeyPrefixPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.TagsPolicy">
            <summary>
            A policy that defines custom tags on the cache entry.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.TagsPolicy.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.OutputCaching.TagsPolicy"/> instance.
            </summary>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.TagsPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.TagsPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.TagsPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.VaryByHeaderPolicy">
            <summary>
            When applied, the cached content will be different for every value of the provided headers.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHeaderPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHeaderPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHeaderPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.VaryByHostPolicy">
            <summary>
            When applied, the cached content will be different for every value of the HOST header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHostPolicy.#ctor(System.Boolean)">
            <summary>
            Creates a policy that can vary the cached content based on the HOST header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHostPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHostPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByHostPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.VaryByQueryPolicy">
            <summary>
            When applied, the cached content will be different for every value of the provided query string keys.
            It also disables the default behavior which is to vary on all query string keys.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByQueryPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByQueryPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByQueryPolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.VaryByRouteValuePolicy">
            <summary>
            When applied, the cached content will be different for every value of the provided route values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByRouteValuePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByRouteValuePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByRouteValuePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OutputCaching.VaryByValuePolicy">
            <summary>
            When applied, the cached content will be different for every provided value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByValuePolicy.#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Collections.Generic.KeyValuePair{System.String,System.String}}})">
            <summary>
            Creates a policy that vary the cached content based on the specified value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByValuePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#CacheRequestAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByValuePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeFromCacheAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.OutputCaching.VaryByValuePolicy.Microsoft#AspNetCore#OutputCaching#IOutputCachePolicy#ServeResponseAsync(Microsoft.AspNetCore.OutputCaching.OutputCacheContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.StreamUtilities.BodySegmentSize">
            <summary>
            The segment size for buffering the response body in bytes. The default is set to 80 KB (81920 Bytes) to avoid allocations on the LOH.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OutputCaching.Resources.TagCannotBeNull">
            <summary>A tag value cannot be null.</summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.OutputCacheApplicationBuilderExtensions">
            <summary>
            Extension methods for adding the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware"/> to an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.OutputCacheApplicationBuilderExtensions.UseOutputCache(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware"/> for caching HTTP responses.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OutputCacheServiceCollectionExtensions">
            <summary>
            Extension methods for the OutputCaching middleware.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheServiceCollectionExtensions.AddOutputCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add output caching services.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> for adding services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheServiceCollectionExtensions.AddOutputCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.OutputCaching.OutputCacheOptions})">
            <summary>
            Add output caching services and configure the related options.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> for adding services.</param>
            <param name="configureOptions">A delegate to configure the <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCacheOptions"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions">
            <summary>
            A set of endpoint extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput``1(``0)">
            <summary>
            Marks an endpoint to be cached with the default policy.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput``1(``0,Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy)">
            <summary>
            Marks an endpoint to be cached with the specified policy.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput``1(``0,System.Action{Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder})">
            <summary>
            Marks an endpoint to be cached using the specified policy builder.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IEndpointConventionBuilder"/>.</param>
            <param name="policy">An action on <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder"/>.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput``1(``0,System.Action{Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder},System.Boolean)">
            <summary>
            Marks an endpoint to be cached using the specified policy builder.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IEndpointConventionBuilder"/>.</param>
            <param name="policy">An action on <see cref="T:Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder"/>.</param>
            <param name="excludeDefaultPolicy">Whether to exclude the default policy or not.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput``1(``0,System.String)">
            <summary>
            Marks an endpoint to be cached using a named policy.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm">
            <summary>
            Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Marshals the Task as an IAsyncResult, using the supplied callback and state
            to implement the APM pattern.
            </summary>
            <param name="task">The Task to be marshaled.</param>
            <param name="callback">The callback to be invoked upon completion.</param>
            <param name="state">The state to be stored in the IAsyncResult.</param>
            <returns>An IAsyncResult to represent the task's asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End``1(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm.TaskAsyncResult">
            <summary>Provides a simple IAsyncResult that wraps a Task.</summary>
            <remarks>
            We could use the Task as the IAsyncResult if the Task's AsyncState is the same as the object state,
            but that's very rare, in particular in a situation where someone cares about allocation, and always
            using TaskAsyncResult simplifies things and enables additional optimizations.
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._callback">
            <summary>Callback to invoke when the wrapped task completes.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object,System.AsyncCallback)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the associated object state.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="state">The new AsyncState value.</param>
            <param name="callback">Callback to invoke when the wrapped task completes.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskAsyncResult.InvokeCallback">
            <summary>Invokes the callback.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
            <remarks>This is set lazily based on whether the <see cref="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._task"/> has completed by the time this object is created.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.IsCompleted">
            <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
    </members>
</doc>
