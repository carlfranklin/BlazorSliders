@page "/sliderpositiontest"

<h3>Traditional SliderPosition Binding Test</h3>

<div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin-bottom: 20px; border-radius: 5px;">
    <strong>⚠️ Warning:</strong> This page demonstrates the traditional <code>SliderPosition</code> parameter and its binding issues.
    For the improved API without cyclical binding problems, see the <NavLink href="newsliderpositiontest">New Slider Position API</NavLink> page.
</div>

<div style="margin-bottom: 20px;">
    <h4>Current Bound Positions (with SliderPosition + SliderPositionChanged):</h4>
    <div style="background-color: #f8f9fa; padding: 10px; border-radius: 5px;">
        <p><strong>Horizontal Position:</strong> @horizontalPosition</p>
        <p><strong>Vertical Position:</strong> @verticalPosition</p>
        <p><em>These values update through traditional SliderPositionChanged event handling</em></p>
    </div>
    
    <h4>Cyclical Binding Demonstration:</h4>
    <div style="background-color: #f8d7da; padding: 10px; border-radius: 5px; margin: 10px 0;">
        <p><strong>Problem:</strong> Try setting positions programmatically below. Notice how the bound variables change unexpectedly!</p>
        <div>
            <label>Set Horizontal Position Programmatically: </label>
            <input type="number" @bind="inputHorizontalPosition" min="100" max="400" step="10" />
            <button @onclick="SetHorizontalPositionProgrammatically" class="btn btn-warning btn-sm">
                Set (May Cause Issues!)
            </button>
        </div>
        <div style="margin-top: 10px;">
            <label>Set Vertical Position Programmatically: </label>
            <input type="number" @bind="inputVerticalPosition" min="100" max="400" step="10" />
            <button @onclick="SetVerticalPositionProgrammatically" class="btn btn-warning btn-sm">
                Set (May Cause Issues!)
            </button>
        </div>
    </div>
    
    <h4>Position Change History:</h4>
    <div style="height: 150px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; background-color: #f8f9fa;">
        @if (!positionHistory.Any())
        {
            <em>No position changes yet. Move the sliders or set positions programmatically.</em>
        }
        else
        {
            @foreach (var entry in positionHistory)
            {
                <div style="margin-bottom: 5px; padding: 3px; @(entry.Contains("ERROR") ? "background-color: #f8d7da; color: #721c24;" : "")">
                    @entry
                </div>
            }
        }
    </div>
    
    <h4>Simulated DisposeAsync Issues:</h4>
    <div style="background-color: #d1ecf1; padding: 10px; border-radius: 5px;">
        <p>Try to read current positions (simulating what you'd do in DisposeAsync):</p>
        <button @onclick="SimulateDisposeAsync" class="btn btn-info btn-sm">
            Read Current Positions (DisposeAsync Simulation)
        </button>
        <p><em>With traditional binding, these values may not reflect the actual slider positions!</em></p>
    </div>
    
    <div style="margin-top: 10px;">
        <button @onclick="ClearHistory" class="btn btn-secondary btn-sm">Clear History</button>
        <button @onclick="ResetPositions" class="btn btn-primary btn-sm">Reset to Default Positions</button>
    </div>
</div>

<div style="height: 500px; border: 2px solid #dee2e6; border-radius: 5px;">
    <AbsolutePanel AutoResize="false">
        <VerticalSliderPanel @ref="verticalSlider" 
                           LeftPanelStartingWidth="250" 
                           SliderWidth="10"
                           SliderPosition="verticalPosition"
                           SliderPositionChanged="OnVerticalPositionChanged">
            <LeftChildContent>
                <HorizontalSliderPanel @ref="horizontalSlider"
                                     PanelPosition="PanelPosition.Left"
                                     TopPanelHeight="200"
                                     SliderHeight="10"
                                     SliderPosition="horizontalPosition"
                                     SliderPositionChanged="OnHorizontalPositionChanged">
                    <TopChildContent>
                        <div style="padding:15px; background-color: #e3f2fd; height: 100%; display: flex; flex-direction: column; justify-content: center;">
                            <h5>Top Panel (Traditional Binding)</h5>
                            <p><strong>Bound Horizontal Position:</strong> @horizontalPosition</p>
                            <p><strong>Panel Height:</strong> @horizontalPosition px</p>
                            <small>This panel's height is controlled by SliderPosition binding</small>
                        </div>
                    </TopChildContent>
                    <BottomChildContent>
                        <div style="padding:15px; background-color: #f3e5f5; height: 100%; display: flex; flex-direction: column; justify-content: center;">
                            <h5>Bottom Panel</h5>
                            <p>This panel automatically adjusts as the top panel changes.</p>
                            <p><strong>Available Height:</strong> @(500 - horizontalPosition - 10) px</p>
                            <small>Height = Container Height - Top Panel Height - Slider Height</small>
                        </div>
                    </BottomChildContent>
                </HorizontalSliderPanel>
            </LeftChildContent>
            <RightChildContent>
                <div style="padding:15px; background-color: #e8f5e8; height: 100%; display: flex; flex-direction: column; justify-content: center;">
                    <h5>Right Panel (Traditional Binding)</h5>
                    <p><strong>Bound Vertical Position:</strong> @verticalPosition</p>
                    <p><strong>Panel Width:</strong> @verticalPosition px</p>
                    <p><strong>Available Width:</strong> @(800 - verticalPosition - 10) px</p>
                    <small>This panel's width is controlled by SliderPosition binding</small>
                </div>
            </RightChildContent>
        </VerticalSliderPanel>
    </AbsolutePanel>
</div>

@code {
    private VerticalSliderPanel? verticalSlider;
    private HorizontalSliderPanel? horizontalSlider;
    
    // Two-way bound positions - these demonstrate the cyclical binding issues
    private int horizontalPosition = 200;
    private int verticalPosition = 250;
    
    // Input fields for programmatic setting
    private int inputHorizontalPosition = 300;
    private int inputVerticalPosition = 300;
    
    private List<string> positionHistory = new List<string>();
    private int eventCounter = 0;

    protected override void OnInitialized()
    {
        positionHistory.Add($"[{DateTime.Now:HH:mm:ss.fff}] Component initialized with traditional SliderPosition + SliderPositionChanged");
        positionHistory.Add($"[{DateTime.Now:HH:mm:ss.fff}] Initial positions - Horizontal: {horizontalPosition}, Vertical: {verticalPosition}");
    }

    private async Task OnHorizontalPositionChanged(int newPosition)
    {
        eventCounter++;
        var oldPosition = horizontalPosition;
        
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] Event #{eventCounter}: Horizontal changed from {oldPosition} to {newPosition}");
        
        // This assignment can cause cyclical binding issues
        horizontalPosition = newPosition;
        
        if (positionHistory.Count > 20)
        {
            positionHistory.RemoveAt(20);
        }
        
        StateHasChanged();
    }

    private async Task OnVerticalPositionChanged(int newPosition)
    {
        eventCounter++;
        var oldPosition = verticalPosition;
        
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] Event #{eventCounter}: Vertical changed from {oldPosition} to {newPosition}");
        
        // This assignment can cause cyclical binding issues
        verticalPosition = newPosition;
        
        if (positionHistory.Count > 20)
        {
            positionHistory.RemoveAt(20);
        }
        
        StateHasChanged();
    }

    private void SetHorizontalPositionProgrammatically()
    {
        var oldPosition = horizontalPosition;
        horizontalPosition = inputHorizontalPosition;
        
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] PROGRAMMATIC: Set horizontal from {oldPosition} to {inputHorizontalPosition}");
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] WARNING: This may trigger unexpected binding updates!");
        
        StateHasChanged();
    }

    private void SetVerticalPositionProgrammatically()
    {
        var oldPosition = verticalPosition;
        verticalPosition = inputVerticalPosition;
        
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] PROGRAMMATIC: Set vertical from {oldPosition} to {inputVerticalPosition}");
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] WARNING: This may trigger unexpected binding updates!");
        
        StateHasChanged();
    }

    private void SimulateDisposeAsync()
    {
        // This simulates trying to read current positions in DisposeAsync
        // With traditional binding, these may not be accurate
        var hPos = horizontalPosition;
        var vPos = verticalPosition;
        
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] DISPOSE SIMULATION: Read positions - H: {hPos}, V: {vPos}");
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] WARNING: These values may not reflect actual slider positions!");
        
        StateHasChanged();
    }

    private void ClearHistory()
    {
        positionHistory.Clear();
        eventCounter = 0;
        StateHasChanged();
    }

    private void ResetPositions()
    {
        horizontalPosition = 200;
        verticalPosition = 250;
        inputHorizontalPosition = 300;
        inputVerticalPosition = 300;
        
        positionHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss.fff}] RESET: Positions reset to defaults");
        
        StateHasChanged();
    }
}