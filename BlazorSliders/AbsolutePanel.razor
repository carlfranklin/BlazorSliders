@inherits SliderPanelBase
@inject IJSRuntime js

<div id="@Id" class="AbsolutePanel @ClassString" style="@StyleString position:absolute;
    left:@LeftPx;
    top:@TopPx;
    width:@WidthPx;
    height:@HeightPx;">
    <CascadingValue Value=this Name="directParent">
        <CascadingValue Value=Width Name="directWidth">
            <CascadingValue Value=Height Name="directHeight">
                @ChildContent
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>

<Window WindowResized="OnWindowResized" Id="@Id" ParentContained="ParentContained"/>

@code {


    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool AutoResize { get; set; } = false;

    [Parameter]
    public bool ParentContained { get; set; } = false;

    [Parameter]
    public string StyleString { get; set; } = "";

    [Parameter]
    public string ClassString { get; set; } = "";

    [Parameter]
    public new int Top
    {
        get
        {
            return base.Top;
        }
        set
        {
            base.Top = value;
        }
    }


    [Parameter]
    public new int Left
    {
        get
        {
            return base.Left;
        }
        set
        {
            base.Left = value;
        }
    }

    public SliderPanelBase ChildPanel { get; set; }

    /// <summary>
    /// This happens when the user resizes the browser
    /// </summary>
    /// <param name="size"></param>
    /// <returns></returns>
    async Task OnWindowResized(Size size)
    {

        if (AutoResize)
        {
            Width = size.Width - Left;
            Height = size.Height - Top;
        }
        await InvokeAsync(StateHasChanged);
        if (ChildPanel != null)
        {
            ChildPanel.Resize();
        }
        await InvokeAsync(StateHasChanged);
    }
}
