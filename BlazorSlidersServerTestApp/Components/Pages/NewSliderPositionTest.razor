@page "/newsliderpositiontest"

<h3>New Slider Position API Test</h3>

<div style="margin-bottom: 20px;">
    <h4>Current Positions (using CurrentSliderPosition property):</h4>
    <p>Horizontal Current Position: @(horizontalSlider?.CurrentSliderPosition ?? 0)</p>
    <p>Vertical Current Position: @(verticalSlider?.CurrentSliderPosition ?? 0)</p>
    
    <h4>Bound Positions (traditional binding - should NOT change):</h4>
    <p>Horizontal Bound Position: @horizontalBoundPosition</p>
    <p>Vertical Bound Position: @verticalBoundPosition</p>
    
    <h4>Position Change History:</h4>
    <div style="height: 100px; overflow-y: scroll; border: 1px solid #ccc; padding: 5px;">
        @foreach (var entry in positionHistory)
        {
            <div>@entry</div>
        }
    </div>
    
    <h4>Manual Position Control:</h4>
    <div>
        <label>Set Horizontal Initial Position: </label>
        <input type="number" @bind="newHorizontalPosition" min="100" max="400" />
        <button @onclick="ResetHorizontalPosition">Reset Component</button>
    </div>
    <div>
        <label>Set Vertical Initial Position: </label>
        <input type="number" @bind="newVerticalPosition" min="100" max="400" />
        <button @onclick="ResetVerticalPosition">Reset Component</button>
    </div>
    
    <div style="margin-top: 10px;">
        <button @onclick="LogCurrentPositions">Log Current Positions (simulates DisposeAsync)</button>
        <button @onclick="ClearHistory">Clear History</button>
    </div>
</div>

<div style="height: 500px;" @key="componentKey">
    <AbsolutePanel AutoResize="false">
        <VerticalSliderPanel @ref="verticalSlider" 
                           InitialSliderPosition="@initialVerticalPosition"
                           SliderWidth="10"
                           SliderPositionChanged="OnVerticalPositionChanged">
            <LeftChildContent>
                <HorizontalSliderPanel @ref="horizontalSlider"
                                     PanelPosition="PanelPosition.Left"
                                     InitialSliderPosition="@initialHorizontalPosition"
                                     SliderHeight="10"
                                     SliderPositionChanged="OnHorizontalPositionChanged">
                    <TopChildContent>
                        <div style="padding:10px; background-color: #f0f0f0;">
                            <h4>Top Panel</h4>
                            <p>Current Position: @(horizontalSlider?.CurrentSliderPosition ?? 0)</p>
                            <p>Bound Position: @horizontalBoundPosition</p>
                        </div>
                    </TopChildContent>
                    <BottomChildContent>
                        <div style="padding:10px; background-color: #e0e0e0;">
                            <h4>Bottom Panel</h4>
                            <p>This panel adjusts based on the horizontal slider position.</p>
                            <p>Panel Height: @(horizontalSlider?.BottomPanelHeight ?? 0)px</p>
                        </div>
                    </BottomChildContent>
                </HorizontalSliderPanel>
            </LeftChildContent>
            <RightChildContent>
                <div style="padding:10px; background-color: #d0d0d0;">
                    <h4>Right Panel</h4>
                    <p>Current Position: @(verticalSlider?.CurrentSliderPosition ?? 0)</p>
                    <p>Bound Position: @verticalBoundPosition</p>
                    <p>Panel Width: @(verticalSlider?.RightPanelWidth ?? 0)px</p>
                </div>
            </RightChildContent>
        </VerticalSliderPanel>
    </AbsolutePanel>
</div>

@code {
    private VerticalSliderPanel? verticalSlider;
    private HorizontalSliderPanel? horizontalSlider;
    
    // Initial positions - set these to control starting positions
    private int initialHorizontalPosition = 200;
    private int initialVerticalPosition = 250;
    
    // Bound positions - these should NOT change due to cyclical binding fix
    private int horizontalBoundPosition = 999; // Set to unusual value to verify it doesn't change
    private int verticalBoundPosition = 999;   // Set to unusual value to verify it doesn't change
    
    // For resetting the component
    private int newHorizontalPosition = 200;
    private int newVerticalPosition = 250;
    private string componentKey = Guid.NewGuid().ToString();
    
    private List<string> positionHistory = new List<string>();

    private async Task OnHorizontalPositionChanged(int newPosition)
    {
        positionHistory.Insert(0, $"Horizontal changed to: {newPosition} (Current: {horizontalSlider?.CurrentSliderPosition}) at {DateTime.Now:HH:mm:ss.fff}");
        if (positionHistory.Count > 15)
        {
            positionHistory.RemoveAt(15);
        }
        StateHasChanged();
    }

    private async Task OnVerticalPositionChanged(int newPosition)
    {
        positionHistory.Insert(0, $"Vertical changed to: {newPosition} (Current: {verticalSlider?.CurrentSliderPosition}) at {DateTime.Now:HH:mm:ss.fff}");
        if (positionHistory.Count > 15)
        {
            positionHistory.RemoveAt(15);
        }
        StateHasChanged();
    }

    private void ResetHorizontalPosition()
    {
        initialHorizontalPosition = newHorizontalPosition;
        componentKey = Guid.NewGuid().ToString(); // Force component recreation
        positionHistory.Insert(0, $"Reset horizontal to: {newHorizontalPosition}");
        StateHasChanged();
    }

    private void ResetVerticalPosition()
    {
        initialVerticalPosition = newVerticalPosition;
        componentKey = Guid.NewGuid().ToString(); // Force component recreation
        positionHistory.Insert(0, $"Reset vertical to: {newVerticalPosition}");
        StateHasChanged();
    }

    private void LogCurrentPositions()
    {
        var hPos = horizontalSlider?.CurrentSliderPosition ?? -1;
        var vPos = verticalSlider?.CurrentSliderPosition ?? -1;
        positionHistory.Insert(0, $"Current Positions - H: {hPos}, V: {vPos} (simulates reading in DisposeAsync)");
        StateHasChanged();
    }

    private void ClearHistory()
    {
        positionHistory.Clear();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        positionHistory.Add("Component initialized with new API");
        positionHistory.Add($"Initial positions set - H: {initialHorizontalPosition}, V: {initialVerticalPosition}");
        positionHistory.Add($"Bound positions - H: {horizontalBoundPosition}, V: {verticalBoundPosition} (should not change)");
    }
}