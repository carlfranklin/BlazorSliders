<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Server.HttpSys</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager">
            <summary>
            Exposes the Http.Sys authentication configurations.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.Schemes">
            <summary>
            When attaching to an existing queue this setting must match the one used to create the queue.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.AllowAnonymous">
            <summary>
            Indicates if anonymous requests will be surfaced to the application or challenged by the server.
            The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.AutomaticAuthentication">
            <summary>
            If true the server should set HttpContext.User. If false the server will only provide an
            identity when explicitly requested by the AuthenticationScheme. The default is true.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.AuthenticationDisplayName">
            <summary>
            Sets the display name shown to users on login pages. The default is null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.EnableKerberosCredentialCaching">
            <summary>
            If true, the Kerberos authentication credentials are persisted per connection
            and re-used for subsequent anonymous requests on the same connection.
            Kerberos or Negotiate authentication must be enabled. The default is false.
            This option maps to the native HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING flag.
            <see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_info"/>
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.CaptureCredentials">
            <summary>
            If true, the server captures user credentials from the thread that starts the
            host and impersonates that user during Kerberos or Negotiate authentication.
            Kerberos or Negotiate authentication must be enabled. The default is false.
            This option maps to the native HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL flag.
            <see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_info"/>
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.AuthenticationSchemes">
            <summary>
            Specifies protocols for authentication.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.AuthenticationSchemes.None">
            <summary>
            No authentication is enabled. This should only be used when HttpSysOptions.Authentication.AllowAnonymous is enabled (see <see cref="P:Microsoft.AspNetCore.Server.HttpSys.AuthenticationManager.AllowAnonymous"/>).
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.AuthenticationSchemes.Basic">
            <summary>
            Specifies basic authentication.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.AuthenticationSchemes.NTLM">
            <summary>
            Specifies NTLM authentication.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.AuthenticationSchemes.Negotiate">
            <summary>
            Negotiates with the client to determine the authentication scheme. If both client and server support Kerberos, it is used;
            otherwise, NTLM is used.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.AuthenticationSchemes.Kerberos">
            <summary>
            Specifies Kerberos authentication.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.ClientCertificateMethod">
            <summary>
            Describes the client certificate negotiation method for HTTPS connections.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.ClientCertificateMethod.NoCertificate">
            <summary>
            A client certificate will not be populated on the request.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.ClientCertificateMethod.AllowCertificate">
            <summary>
            A client certificate will be populated if already present at the start of a request.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.ClientCertificateMethod.AllowRenegotation">
            <summary>
            The TLS session can be renegotiated to request a client certificate.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.DelegationRule">
            <summary>
            Rule that maintains a handle to the Request Queue and UrlPrefix to
            delegate to.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.DelegationRule.QueueName">
            <summary>
            The name of the Http.Sys request queue
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.DelegationRule.UrlPrefix">
            <summary>
            The URL of the Http.Sys Url Prefix
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.DelegationRule.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.Helpers.GetChunkHeader(System.Int32)">
            <summary>
            A private utility routine to convert an integer to a chunk header,
            which is an ASCII hex number followed by a CRLF.The header is returned
            as a byte array.
            Generates a right-aligned hex string and returns the start offset.
            </summary>
            <param name="size">Chunk size to be encoded</param>
            <returns>A byte array with the header in int.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.Http503VerbosityLevel">
            <summary>
            Enum declaring the allowed values for the verbosity level when http.sys reject requests due to throttling.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.Http503VerbosityLevel.Basic">
            <summary>
            A 503 response is not sent; the connection is reset. This is the default HTTP Server API behavior.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.Http503VerbosityLevel.Limited">
            <summary>
            The HTTP Server API sends a 503 response with a "Service Unavailable" reason phrase.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.Http503VerbosityLevel.Full">
            <summary>
            The HTTP Server API sends a 503 response with a detailed reason phrase.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysDefaults">
            <summary>
            Constants for HttpSys.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysDefaults.AuthenticationScheme">
            <summary>
            The name of the authentication scheme used.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysException">
            <summary>
            Exception thrown by HttpSys when an error occurs
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysException.ErrorCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysListener">
            <summary>
            An HTTP server wrapping the Http.Sys APIs that accepts requests.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.HttpSysListener.Start">
            <summary>
            Start accepting incoming requests.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.HttpSysListener.Dispose">
            <summary>
            Stop the server and clean up.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.HttpSysListener.AcceptAsync(Microsoft.AspNetCore.Server.HttpSys.AsyncAcceptContext)">
            <summary>
            Accept a request from the incoming request queue.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions">
            <summary>
            Contains the options used by HttpSys.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.#ctor">
            <summary>
            Initializes a new <see cref="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.RequestQueueName">
            <summary>
            The name of the Http.Sys request queue
            The default is `null` (Anonymous queue).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.RequestQueueMode">
            <summary>
            This indicates whether the server is responsible for creating and configuring the request queue, or if it should attach to an existing queue.
            Most existing configuration options do not apply when attaching to an existing queue.
            The default is `RequestQueueMode.Create`.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.ClientCertificateMethod">
            <summary>
            Indicates how client certificates should be populated. The default is to allow a certificate without renegotiation.
            This does not change the netsh 'clientcertnegotiation' binding option which will need to be enabled for
            ClientCertificateMethod.AllowCertificate to resolve a certificate.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.MaxAccepts">
            <summary>
            The maximum number of concurrent accepts.
            The default is 5 times the number of processors as returned by <see cref="P:System.Environment.ProcessorCount" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.EnableResponseCaching">
            <summary>
            Attempt kernel-mode caching for responses with eligible headers.
            The response may not include Set-Cookie, Vary, or Pragma headers.
            It must include a Cache-Control header that's public and either a shared-max-age or max-age value, or an Expires header.
            The default is `true`.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.UrlPrefixes">
            <summary>
            The url prefixes to register with Http.Sys. These may be modified at any time prior to disposing
            the listener.
            When attached to an existing queue the prefixes are only used to compute PathBase for requests.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.Authentication">
            <summary>
            Http.Sys authentication settings. These may be modified at any time prior to disposing
            the listener.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.Timeouts">
            <summary>
            Exposes the Http.Sys timeout configurations.  These may also be configured in the registry.
            These may be modified at any time prior to disposing the listener.
            These settings do not apply when attaching to an existing queue.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.ThrowWriteExceptions">
            <summary>
            Gets or Sets if response body writes that fail due to client disconnects should throw exceptions or
            complete normally.
            The default is `false` (complete normally).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.EnableKernelResponseBuffering">
            <summary>
            Enable buffering of response data in the Kernel. The default value is <code>false</code>.
            It should be used by an application doing synchronous I/O or by an application doing asynchronous I/O with
            no more than one outstanding write at a time, and can significantly improve throughput over high-latency connections.
            Applications that use asynchronous I/O and that may have more than one send outstanding at a time should not use this flag.
            Enabling this can results in higher CPU and memory usage by Http.Sys.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.MaxConnections">
            <summary>
            Gets or sets the maximum number of concurrent connections to accept. Set `-1` for infinite.
            Set to `null` to use the registry's machine-wide setting.
            The default value is `null` (machine-wide setting).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.RequestQueueLimit">
            <summary>
            Gets or sets the maximum number of requests that will be queued up in Http.Sys.
            This settings does not apply when attaching to an existing queue.
            The default is 1000.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.MaxRequestBodySize">
            <summary>
            Gets or sets the maximum allowed size of any request body in bytes.
            When set to null, the maximum request body size is unlimited.
            This limit has no effect on upgraded connections which are always unlimited.
            This can be overridden per-request via <see cref="T:Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature"/>.
            The default is set to 30,000,000 bytes, which is approximately 28.6MB.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.AllowSynchronousIO">
            <summary>
            Control whether synchronous input/output is allowed for the HttpContext.Request.Body and HttpContext.Response.Body.
            The default is `false`.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.Http503Verbosity">
            <summary>
            Gets or sets a value that controls how http.sys reacts when rejecting requests due to throttling conditions - like when the request
            queue limit is reached. The default in http.sys is "Basic" which means http.sys is just resetting the TCP connection. IIS uses Limited
            as its default behavior which will result in sending back a 503 - Service Unavailable back to the client.
            This settings does not apply when attaching to an existing queue.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.UnsafePreferInlineScheduling">
            <summary>
            Inline request processing instead of dispatching to the threadpool.
            </summary>
            <remarks>
            Enabling this setting will run application code on the IO thread to reduce request processing latency.
            However, this will limit parallel request processing to <see cref="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.MaxAccepts"/>. This setting can make
            overall throughput worse if requests take long to process.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions.UseLatin1RequestHeaders">
            <summary>
            Configures request headers to use <see cref="P:System.Text.Encoding.Latin1"/> encoding.
            </summary>
            <remarks>
            Defaults to `false`, in which case <see cref="P:System.Text.Encoding.UTF8"/> will be used. />.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType">
            <summary>
            Defines the types of request processing timestamps exposed via the Http.Sys HTTP_REQUEST_TIMING_INFO extensibility point.
            </summary>
            <remarks>
            Use <see cref="T:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestTimingFeature"/> to access these timestamps.
            </remarks>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.ConnectionStart">
            <summary>
            Time the connection started.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.DataStart">
            <summary>
            Time the first HTTP byte is received.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsCertificateLoadStart">
            <summary>
            Time TLS certificate loading starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsCertificateLoadEnd">
            <summary>
            Time TLS certificate loading ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsHandshakeLeg1Start">
            <summary>
            Time TLS leg one handshake starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsHandshakeLeg1End">
            <summary>
            Time TLS leg one handshake ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsHandshakeLeg2Start">
            <summary>
            Time TLS leg two handshake starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsHandshakeLeg2End">
            <summary>
            Time TLS leg two handshake ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsAttributesQueryStart">
            <summary>
            Time TLS attribute query starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsAttributesQueryEnd">
            <summary>
            Time TLS attribute query ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsClientCertQueryStart">
            <summary>
            Time TLS client cert query starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.TlsClientCertQueryEnd">
            <summary>
            Time TLS client cert query ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.Http2StreamStart">
            <summary>
            Time HTTP2 streaming starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.Http2HeaderDecodeStart">
            <summary>
            Time HTTP2 header decoding starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.Http2HeaderDecodeEnd">
            <summary>
            Time HTTP2 header decoding ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestHeaderParseStart">
            <summary>
            Time HTTP header parsing starts.
            </summary>
            <remarks>
            For most requests, this is a good timestamp to use as a per request starting timestamp.
            </remarks>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestHeaderParseEnd">
            <summary>
            Time HTTP header parsing ends.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestRoutingStart">
            <summary>
            Time Http.Sys starts to determine which request queue to route the request to.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestRoutingEnd">
            <summary>
            Time Http.Sys has determined which request queue to route the request to.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestQueuedForInspection">
            <summary>
            Time the request is queued for inspection.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestDeliveredForInspection">
            <summary>
            Time the request is delivered for inspection.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestReturnedAfterInspection">
            <summary>
            Time the request has finished being inspected.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestQueuedForDelegation">
            <summary>
            Time the request is queued for delegation.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestDeliveredForDelegation">
            <summary>
            Time the request is delivered for delegation.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestReturnedAfterDelegation">
            <summary>
            Time the request was delegated.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestQueuedForIO">
            <summary>
            Time the request was queued to the final request queue for processing.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.RequestDeliveredForIO">
            <summary>
            Time the request was delivered to the final request queue for processing.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.Http3StreamStart">
            <summary>
            Time HTTP3 streaming starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.Http3HeaderDecodeStart">
            <summary>
            Time HTTP3 header decoding starts.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType.Http3HeaderDecodeEnd">
            <summary>
            Time HTTP3 header decoding ends.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestDelegationFeature">
            <summary>
            Interface for delegating requests to other Http.Sys request queues.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestDelegationFeature.CanDelegate">
            <summary>
            Indicates if the server can delegate this request to another HttpSys request queue.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestDelegationFeature.DelegateRequest(Microsoft.AspNetCore.Server.HttpSys.DelegationRule)">
            <summary>
            Attempt to delegate the request to another Http.Sys request queue. The request body
            must not be read nor the response started before this is invoked. Check <see cref="P:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestDelegationFeature.CanDelegate"/>
            before invoking.
            </summary>
            <param name="destination">The rule maintaining the handle to the destination queue.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestInfoFeature">
            <summary>
            This exposes the Http.Sys HTTP_REQUEST_INFO extensibility point as opaque data for the caller to interperate.
            <see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v2"/>,
            <see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_info"/>
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestInfoFeature.RequestInfo">
            <summary>
            A collection of the HTTP_REQUEST_INFO for the current request. The integer represents the identifying
            HTTP_REQUEST_INFO_TYPE enum value. The Memory is opaque bytes that need to be interperted in the format
            specified by the enum value.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestTimingFeature">
            <summary>
            This exposes the Http.Sys HTTP_REQUEST_TIMING_INFO extensibility point which contains request processing timestamp data from Http.Sys.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestTimingFeature.Timestamps">
            <summary>
            Gets all Http.Sys timing timestamps
            </summary>
            <remarks>
            These timestamps were obtained using QueryPerformanceCounter <see href="https://learn.microsoft.com/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter"/> and the timestamp frequency can be obtained via QueryPerformanceFrequency <see href="https://learn.microsoft.com/windows/win32/api/profileapi/nf-profileapi-queryperformancefrequency"/>.
            The index of the timing can be cast to <see cref="T:Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType"/> to know what the timing represents.
            The value may be 0 if the timing is not available for the current request.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestTimingFeature.TryGetTimestamp(Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType,System.Int64@)">
            <summary>
            Gets the timestamp for the given timing.
            </summary>
            <remarks>
            These timestamps were obtained using QueryPerformanceCounter <see href="https://learn.microsoft.com/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter"/> and the timestamp frequency can be obtained via QueryPerformanceFrequency <see href="https://learn.microsoft.com/windows/win32/api/profileapi/nf-profileapi-queryperformancefrequency"/>.
            </remarks>
            <param name="timestampType">The timestamp type to get.</param>
            <param name="timestamp">The value of the timestamp if set.</param>
            <returns>True if the given timing was set (i.e., non-zero).</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.IHttpSysRequestTimingFeature.TryGetElapsedTime(Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType,Microsoft.AspNetCore.Server.HttpSys.HttpSysRequestTimingType,System.TimeSpan@)">
            <summary>
            Gets the elapsed time between the two given timings.
            </summary>
            <param name="startingTimestampType">The timestamp type marking the beginning of the time period.</param>
            <param name="endingTimestampType">The timestamp type marking the end of the time period.</param>
            <param name="elapsed">A <see cref="T:System.TimeSpan"/> for the elapsed time between the starting and ending timestamps.</param>
            <returns>True if both given timings were set (i.e., non-zero).</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.IServerDelegationFeature">
            <summary>
            This exposes the creation of delegation rules on request queues owned by the server.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.IServerDelegationFeature.CreateDelegationRule(System.String,System.String)">
            <summary>
            Create a delegation rule on request queue owned by the server.
            </summary>
            <param name="queueName">The name of the Http.Sys request queue.</param>
            <param name="urlPrefix">The URL of the Http.Sys Url Prefix.</param>
            <returns>
            Creates a <see cref="T:Microsoft.AspNetCore.Server.HttpSys.DelegationRule"/> that can used to delegate individual requests.
            </returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.RequestQueue.Created">
            <summary>
            True if this instace created the queue instead of attaching to an existing one.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.SafeLibraryHandle">
            <summary>
            Represents a handle to a Windows module (DLL).
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.SafeLibraryHandle.DoesProcExist(System.String)">
            <summary>
            Returns a value stating whether the library exports a given proc.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.SafeLibraryHandle.GetProcAddress``1(System.String,System.Boolean)">
            <summary>
            Gets a delegate pointing to a given export from this library.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.SafeLibraryHandle.Open(System.String)">
            <summary>
            Opens a library. If 'filename' is not a fully-qualified path, the default search path is used.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.RequestContext.Dispose">
            <summary>
            Flushes and completes the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.RequestContext.Abort">
            <summary>
            Forcibly terminate and dispose the request, closing the connection if necessary.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Response.AuthenticationChallenges">
            <summary>
            The authentication challenges that will be added to the response if the status code is 401.
            This must be a subset of the AuthenticationSchemes enabled on the server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Response.CacheTtl">
            <summary>
            Enable kernel caching for the response with the given timeout. Http.Sys determines if the response
            can be cached.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Response.HasStarted">
            <summary>
            Indicates if the response status, reason, and headers are prepared to send and can
            no longer be modified. This is caused by the first write or flush to the response body.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.RequestQueueMode">
            <summary>
            Used to indicate if this server instance should create a new Http.Sys request queue
            or attach to an existing one.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.RequestQueueMode.Create">
            <summary>
            Create a new queue. This will fail if there's an existing queue with the same name.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.RequestQueueMode.Attach">
            <summary>
            Attach to an existing queue with the name given. This will fail if the queue does not already exist.
            Most configuration options do not apply when attaching to an existing queue.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Server.HttpSys.RequestQueueMode.CreateOrAttach">
            <summary>
            Create a queue with the given name if it does not already exist, otherwise attach to the existing queue.
            Most configuration options do not apply when attaching to an existing queue.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager">
            <summary>
            Exposes the Http.Sys timeout configurations.  These may also be configured in the registry.
            These settings do not apply when attaching to an existing queue.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager.EntityBody">
             <summary>
             The time, in seconds, allowed for the request entity body to arrive.  The default timer is 2 minutes.
            
             The HTTP Server API turns on this timer when the request has an entity body. The timer expiration is
             initially set to the configured value. When the HTTP Server API receives additional data indications on the
             request, it resets the timer to give the connection another interval.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager.DrainEntityBody">
             <summary>
             The time, in seconds, allowed for the HTTP Server API to drain the entity body on a Keep-Alive connection.
             The default timer is 2 minutes.
            
             On a Keep-Alive connection, after the application has sent a response for a request and before the request
             entity body has completely arrived, the HTTP Server API starts draining the remainder of the entity body to
             reach another potentially pipelined request from the client. If the time to drain the remaining entity body
             exceeds the allowed period the connection is timed out.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager.RequestQueue">
             <summary>
             The time, in seconds, allowed for the request to remain in the request queue before the application picks
             it up.  The default timer is 2 minutes.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager.IdleConnection">
             <summary>
             The time, in seconds, allowed for an idle connection.  The default timer is 2 minutes.
            
             This timeout is only enforced after the first request on the connection is routed to the application.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager.HeaderWait">
             <summary>
             The time, in seconds, allowed for the HTTP Server API to parse the request header.  The default timer is
             2 minutes.
            
             This timeout is only enforced after the first request on the connection is routed to the application.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.TimeoutManager.MinSendBytesPerSecond">
             <summary>
             The minimum send rate, in bytes-per-second, for the response. The default response send rate is 150
             bytes-per-second.
            
             Use 0 to indicate that system defaults should be used.
            
             To disable this timer set it to UInt32.MaxValue
             </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix">
            <summary>
            A set of URL parameters used to listen for incoming requests.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Create(System.String,System.String,System.String,System.String)">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364698(v=vs.85).aspx
            </summary>
            <param name="scheme">http or https. Will be normalized to lower case.</param>
            <param name="host">+, *, IPv4, [IPv6], or a dns name. Http.Sys does not permit punycode (xn--), use Unicode instead.</param>
            <param name="port">If empty, the default port for the given scheme will be used (80 or 443).</param>
            <param name="path">Should start and end with a '/', though a missing trailing slash will be added. This value must be un-escaped.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Create(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364698(v=vs.85).aspx
            </summary>
            <param name="scheme">http or https. Will be normalized to lower case.</param>
            <param name="host">+, *, IPv4, [IPv6], or a dns name. Http.Sys does not permit punycode (xn--), use Unicode instead.</param>
            <param name="portValue">If empty, the default port for the given scheme will be used (80 or 443).</param>
            <param name="path">Should start and end with a '/', though a missing trailing slash will be added. This value must be un-escaped.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Create(System.String)">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364698(v=vs.85).aspx
            </summary>
            <param name="prefix">The string that the <see cref="T:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix"/> will be created from.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.IsHttps">
            <summary>
            Gets a value that determines if the prefix's scheme is HTTPS.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Scheme">
            <summary>
            Gets the scheme used by the prefix.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Host">
            <summary>
            Gets the host domain name used by the prefix.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Port">
            <summary>
            Gets a string representation of the port used by the prefix.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.PortValue">
            <summary>
            Gets an integer representation of the port used by the prefix.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Path">
            <summary>
            Gets the path component of the prefix.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.FullPrefix">
            <summary>
            Gets a string representation of the prefix
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection">
            <summary>
            A collection or URL prefixes
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.IsReadOnly">
            <summary>
            Gets a value that determines if this collection is readOnly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Add(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix"/> from the given string, and adds it to this collection.
            </summary>
            <param name="prefix">The string representing the <see cref="T:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix"/> to add to this collection.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Add(Microsoft.AspNetCore.Server.HttpSys.UrlPrefix)">
            <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Server.HttpSys.UrlPrefix"/> to this collection.
            </summary>
            <param name="item">The prefix to add to this collection.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Contains(Microsoft.AspNetCore.Server.HttpSys.UrlPrefix)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.CopyTo(Microsoft.AspNetCore.Server.HttpSys.UrlPrefix[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.Remove(Microsoft.AspNetCore.Server.HttpSys.UrlPrefix)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.UrlPrefixCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_AccessDenied">
            <summary>The prefix '{0}' is not registered. Please run the following command as Administrator to register this prefix:
            netsh http add urlacl url={0} user={1}
            See "Preregister URL prefixes on the server" on https://go.microsoft.com/fwlink/?linkid=2127065 for more i ...</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.Resources.FormatException_AccessDenied(System.Object,System.Object)">
            <summary>The prefix '{0}' is not registered. Please run the following command as Administrator to register this prefix:
            netsh http add urlacl url={0} user={1}
            See "Preregister URL prefixes on the server" on https://go.microsoft.com/fwlink/?linkid=2127065 for more i ...</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_ArrayTooSmall">
            <summary>The destination array is too small.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_EndCalledMultipleTimes">
            <summary>End has already been called.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_InvalidStatusCode">
            <summary>The status code '{0}' is not supported.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.Resources.FormatException_InvalidStatusCode(System.Object)">
            <summary>The status code '{0}' is not supported.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_NoSeek">
            <summary>The stream is not seekable.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_PrefixAlreadyRegistered">
            <summary>The prefix '{0}' is already registered.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.Resources.FormatException_PrefixAlreadyRegistered(System.Object)">
            <summary>The prefix '{0}' is already registered.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_ReadOnlyStream">
            <summary>This stream only supports read operations.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_TooMuchWritten">
            <summary>More data written than specified in the Content-Length header.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_UnsupportedScheme">
            <summary>Only the http and https schemes are supported.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_WriteOnlyStream">
            <summary>This stream only supports write operations.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Exception_WrongIAsyncResult">
            <summary>The given IAsyncResult does not match this opperation.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Server.HttpSys.Resources.Warning_ExceptionInOnResponseCompletedAction">
            <summary>An exception occurred while running an action registered with {0}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.HttpSys.Resources.FormatWarning_ExceptionInOnResponseCompletedAction(System.Object)">
            <summary>An exception occurred while running an action registered with {0}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.StringUtilities.ConcatAsHexSuffix(System.String,System.Char,System.UInt32)">
            <summary>
            A faster version of String.Concat(<paramref name="str"/>, <paramref name="separator"/>, <paramref name="number"/>.ToString("X8"))
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions">
            <summary>
            Provides extensions method to use Http.sys as the server for the web host.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions.UseHttpSys(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Specify Http.sys as the server to be used by the web host.
            </summary>
            <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
            <returns>
            A reference to the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> parameter object.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions.UseHttpSys(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions})">
            <summary>
            Specify Http.sys as the server to be used by the web host.
            </summary>
            <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
            <param name="options">
            A callback to configure Http.sys options.
            </param>
            <returns>
            A reference to the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> parameter object.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.HttpSys.Internal.RawUrlHelper.GetPath(System.Span{System.Byte})">
            <summary>
            Find the segment of the URI byte array which represents the path.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.HttpSys.Internal.RawUrlHelper.FindHttpOrHttps(System.Span{System.Byte})">
            <summary>
            Compare the beginning portion of the raw URL byte array to https:// and http://
            </summary>
            <param name="raw">The byte array represents the raw URI</param>
            <returns>Length of the matched bytes, 0 if it is not matched.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder.Unescape(System.Span{System.Byte})">
            <summary>
            Unescape a given path string in place. The given path string  may contain escaped char.
            </summary>
            <param name="rawPath">The raw path string to be unescaped</param>
            <returns>The unescaped path string</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder.DecodeCore(System.Int32@,System.Int32@,System.Int32,System.Span{System.Byte})">
            <summary>
            Unescape the percent-encodings
            </summary>
            <param name="reader">The iterator point to the first % char</param>
            <param name="writer">The place to write to</param>
            <param name="end">The end of the buffer</param>
            <param name="buffer">The byte array</param>
        </member>
        <member name="M:Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder.UnescapePercentEncoding(System.Int32@,System.Int32,System.ReadOnlySpan{System.Byte})">
             <summary>
             Read the percent-encoding and try unescape it.
            
             The operation first peek at the character the <paramref name="scan"/>
             iterator points at. If it is % the <paramref name="scan"/> is then
             moved on to scan the following to characters. If the two following
             characters are hexadecimal literals they will be unescaped and the
             value will be returned.
            
             If the first character is not % the <paramref name="scan"/> iterator
             will be removed beyond the location of % and -1 will be returned.
            
             If the following two characters can't be successfully unescaped the
             <paramref name="scan"/> iterator will be move behind the % and -1
             will be returned.
             </summary>
             <param name="scan">The value to read</param>
             <param name="end">The end of the buffer</param>
             <param name="buffer">The byte array</param>
             <returns>The unescaped byte if success. Otherwise return -1.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder.ReadHex(System.Int32@,System.Int32,System.ReadOnlySpan{System.Byte})">
             <summary>
             Read the next char and convert it into hexadecimal value.
            
             The <paramref name="scan"/> iterator will be moved to the next
             byte no matter no matter whether the operation successes.
             </summary>
             <param name="scan">The value to read</param>
             <param name="end">The end of the buffer</param>
             <param name="buffer">The byte array</param>
             <returns>The hexadecimal value if successes, otherwise -1.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Shared.DictionaryItemDebugView`2">
            <summary>
            Defines a key/value pair for displaying an item of a dictionary by a debugger.
            </summary>
        </member>
        <member name="T:System.Buffers.DiagnosticMemoryPool">
            <summary>
            Used to allocate and distribute re-usable blocks of memory.
            </summary>
        </member>
        <member name="F:System.Buffers.DiagnosticMemoryPool.AnySize">
            <summary>
            This default value passed in to Rent to use the default value for the pool.
            </summary>
        </member>
        <member name="T:System.Buffers.DiagnosticPoolBlock">
            <summary>
            Block tracking object used by the byte buffer memory pool. A slab is a large allocation which is divided into smaller blocks. The
            individual blocks are then treated as independent array segments.
            </summary>
        </member>
        <member name="F:System.Buffers.DiagnosticPoolBlock._pool">
            <summary>
            Back-reference to the memory pool which this block was allocated from. It may only be returned to this pool.
            </summary>
        </member>
        <member name="M:System.Buffers.DiagnosticPoolBlock.#ctor(System.Buffers.DiagnosticMemoryPool,System.Buffers.IMemoryOwner{System.Byte})">
            <summary>
            This object cannot be instantiated outside of the static Create method
            </summary>
        </member>
        <member name="T:System.Buffers.MemoryPoolBlock">
            <summary>
            Wraps an array allocated in the pinned object heap in a reusable block of managed memory
            </summary>
        </member>
        <member name="P:System.Buffers.MemoryPoolBlock.Pool">
            <summary>
            Back-reference to the memory pool which this block was allocated from. It may only be returned to this pool.
            </summary>
        </member>
        <member name="T:System.Buffers.PinnedBlockMemoryPool">
            <summary>
            Used to allocate and distribute re-usable blocks of memory.
            </summary>
        </member>
        <member name="F:System.Buffers.PinnedBlockMemoryPool._blockSize">
            <summary>
            The size of a block. 4096 is chosen because most operating systems use 4k pages.
            </summary>
        </member>
        <member name="P:System.Buffers.PinnedBlockMemoryPool.MaxBufferSize">
            <summary>
            Max allocation block size for pooled blocks,
            larger values can be leased but they will be disposed after use rather than returned to the pool.
            </summary>
        </member>
        <member name="P:System.Buffers.PinnedBlockMemoryPool.BlockSize">
            <summary>
            The size of a block. 4096 is chosen because most operating systems use 4k pages.
            </summary>
        </member>
        <member name="F:System.Buffers.PinnedBlockMemoryPool._blocks">
            <summary>
            Thread-safe collection of blocks which are currently in the pool. A slab will pre-allocate all of the block tracking objects
            and add them to this collection. When memory is requested it is taken from here first, and when it is returned it is re-added.
            </summary>
        </member>
        <member name="F:System.Buffers.PinnedBlockMemoryPool._isDisposed">
            <summary>
            This is part of implementing the IDisposable pattern.
            </summary>
        </member>
        <member name="F:System.Buffers.PinnedBlockMemoryPool.AnySize">
            <summary>
            This default value passed in to Rent to use the default value for the pool.
            </summary>
        </member>
        <member name="M:System.Buffers.PinnedBlockMemoryPool.Return(System.Buffers.MemoryPoolBlock)">
            <summary>
            Called to return a block to the pool. Once Return has been called the memory no longer belongs to the caller, and
            Very Bad Things will happen if the memory is read of modified subsequently. If a caller fails to call Return and the
            block tracking object is garbage collected, the block tracking object's finalizer will automatically re-create and return
            a new tracking object into the pool. This will only happen if there is a bug in the server, however it is necessary to avoid
            leaving "dead zones" in the slab due to lost block tracking objects.
            </summary>
            <param name="block">The block to return. It must have been acquired by calling Lease on the same memory pool instance.</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm">
            <summary>
            Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Marshals the Task as an IAsyncResult, using the supplied callback and state
            to implement the APM pattern.
            </summary>
            <param name="task">The Task to be marshaled.</param>
            <param name="callback">The callback to be invoked upon completion.</param>
            <param name="state">The state to be stored in the IAsyncResult.</param>
            <returns>An IAsyncResult to represent the task's asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End``1(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm.TaskAsyncResult">
            <summary>Provides a simple IAsyncResult that wraps a Task.</summary>
            <remarks>
            We could use the Task as the IAsyncResult if the Task's AsyncState is the same as the object state,
            but that's very rare, in particular in a situation where someone cares about allocation, and always
            using TaskAsyncResult simplifies things and enables additional optimizations.
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._callback">
            <summary>Callback to invoke when the wrapped task completes.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object,System.AsyncCallback)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the associated object state.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="state">The new AsyncState value.</param>
            <param name="callback">Callback to invoke when the wrapped task completes.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskAsyncResult.InvokeCallback">
            <summary>Invokes the callback.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
            <remarks>This is set lazily based on whether the <see cref="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._task"/> has completed by the time this object is created.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.IsCompleted">
            <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="T:UnmanagedBufferAllocator">
            <summary>
            Allocator that manages blocks of unmanaged memory.
            </summary>
        </member>
        <member name="P:UnmanagedBufferAllocator.DefaultBlockSize">
            <summary>
            The default block size for the allocator.
            </summary>
            <remarks>
            This size assumes a common page size and provides an accommodation
            for the pointer chain used to track allocated blocks.
            </remarks>
        </member>
        <member name="M:UnmanagedBufferAllocator.#ctor(System.Int32)">
            <summary>
            Instantiate an <see cref="T:UnmanagedBufferAllocator"/> instance.
            </summary>
            <param name="blockSize">The unmanaged memory block size in bytes.</param>
        </member>
        <member name="M:UnmanagedBufferAllocator.AllocAsPointer``1(System.Int32)">
            <summary>
            Allocate the requested amount of space from the allocator.
            </summary>
            <typeparam name="T">The type requested</typeparam>
            <param name="count">The count in <typeparamref name="T"/> units</param>
            <returns>A pointer to the reserved memory.</returns>
            <remarks>
            The allocated memory is uninitialized.
            </remarks>
        </member>
        <member name="M:UnmanagedBufferAllocator.AllocAsSpan``1(System.Int32)">
            <summary>
            Allocate the requested amount of space from the allocator.
            </summary>
            <typeparam name="T">The type requested</typeparam>
            <param name="count">The count in <typeparamref name="T"/> units</param>
            <returns>A Span to the reserved memory.</returns>
            <remarks>
            The allocated memory is uninitialized.
            </remarks>
        </member>
        <member name="M:UnmanagedBufferAllocator.GetHeaderEncodedBytes(System.String,System.Int32@)">
            <summary>
            Get pointer to bytes for the supplied string in UTF-8.
            </summary>
            <param name="myString">The string</param>
            <param name="length">The length of the returned byte buffer.</param>
            <returns>A pointer to the buffer of bytes</returns>
        </member>
        <member name="M:UnmanagedBufferAllocator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Windows.Win32.Networking.WinSock.SOCKADDR">
            <summary>The sockaddr structure varies depending on the protocol selected. (sockaddr)</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winsock/ns-winsock-sockaddr">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.WinSock.SOCKADDR.sa_family">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Networking.WinSock.SOCKADDR.sa_data">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION">
            <summary>Defines the version of the HTTP Server API.</summary>
            <remarks>
            <para>Constants that represents the version of the API  are pre-defined in the Http.h header file as follows: "#define HTTPAPI_VERSION_1 {1, 0}" "#define HTTPAPI_VERSION_2 {2, 0}"</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-httpapi_version#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION.HttpApiMajorVersion">
            <summary>Major version of the HTTP Server API.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION.HttpApiMinorVersion">
            <summary>Minor version of the HTTP Server API.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_AUTH_STATUS">
            <summary>Defines the authentication state of a request.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_auth_status">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_AUTH_STATUS.HttpAuthStatusSuccess">
            <summary>The request was successfully authenticated for the authentication type indicated in the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_auth_info">HTTP_REQUEST_AUTH_INFO</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_AUTH_STATUS.HttpAuthStatusNotAuthenticated">
            <summary>
            <para>Authentication was configured on the URL group for this request, however, the HTTP Server API did not handle the authentication. This could be because of one of the following reasons: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_auth_status#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_AUTH_STATUS.HttpAuthStatusFailure">
            <summary>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_auth_status#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_BINDING_INFO">
            <summary>Used to associate a URL Group with a request queue.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_binding_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_BINDING_INFO.Flags">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_property_flags">HTTP_PROPERTY_FLAGS</a> structure specifying whether the property is present.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_BINDING_INFO.RequestQueueHandle">
            <summary>The request queue that is associated with the URL group. The structure can be used to remove an existing binding by setting this parameter to <b>NULL</b>.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_BYTE_RANGE">
            <summary>The HTTP_BYTE_RANGE structure is used to specify a byte range within a cached response fragment, file, or other data block.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_byte_range">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_BYTE_RANGE.StartingOffset">
            <summary>Starting offset of the byte range.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_BYTE_RANGE.Length">
            <summary>Size, in bytes, of the range. If this member is HTTP_BYTE_RANGE_TO_EOF, the range extends from the starting offset to the end of the file or data block.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY">
            <summary>Used to define a cache policy associated with a cached response fragment.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_cache_policy">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY.Policy">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY.SecondsToLive">
            <summary>When the <b>Policy</b> member is equal to HttpCachePolicyTimeToLive, data is cached for <b>SecondsToLive</b> seconds before it is released. For other values of <b>Policy</b>, <b>SecondsToLive</b> is ignored.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY_TYPE">
            <summary>The HTTP_CACHE_POLICY_TYPE enumeration type defines available cache policies.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_cache_policy_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY_TYPE.HttpCachePolicyNocache">
            <summary>Do not cache this value at all.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY_TYPE.HttpCachePolicyUserInvalidates">
            <summary>Cache this value until the user provides a different one.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY_TYPE.HttpCachePolicyTimeToLive">
            <summary>Cache this value for a specified time and then remove it from the cache.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY_TYPE.HttpCachePolicyMaximum">
            <summary>Terminates the enumeration; not used to determine policy.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_CONNECTION_LIMIT_INFO">
            <summary>Used to set or query the limit on the maximum number of outstanding connections for a URL Group.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_connection_limit_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CONNECTION_LIMIT_INFO.Flags">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_property_flags">HTTP_PROPERTY_FLAGS</a> structure specifying whether the property is present.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_CONNECTION_LIMIT_INFO.MaxConnections">
            <summary>The number of connections allowed. Setting this value to HTTP_LIMIT_INFINITE allows an unlimited number of connections.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL">
            <summary>Contains a validated, canonical, UTF-16 Unicode-encoded URL request string together with pointers into it and element lengths.</summary>
            <remarks>For example, if <b>pFullUrl</b> is "http://www.fabrikam.com/path1/path2/file.ext?n1=v1&amp;n2=v2", then <b>pHost</b> points to "www.fabrikam", <b>pAbsPath</b> points to "/path1/…" and <b>pQueryString</b> points to "?n1=v1…".</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.FullUrlLength">
            <summary>Size, in bytes, of the data pointed to by the <b>pFullUrl</b> member, not including a terminating null character.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.HostLength">
            <summary>Size, in bytes, of the data pointed to by the <b>pHost</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.AbsPathLength">
            <summary>Size, in bytes, of the data pointed to by the <b>pAbsPath</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.QueryStringLength">
            <summary>Size, in bytes, of the data pointed to by the <b>pQueryString</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.pFullUrl">
            <summary>Pointer to the scheme element at the beginning of the URL (must be either "http://..." or "https://...").</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.pHost">
            <summary>Pointer to the first character in the host element, immediately following the double slashes at the end of the scheme element.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.pAbsPath">
            <summary>Pointer to the third forward slash ("/") in the string. In a UrlPrefix string, this is the slash immediately preceding the relativeUri element.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL.pQueryString">
            <summary>Pointer to the first question mark (?) in the string, or <b>NULL</b> if there is none.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK">
            <summary>Represents an individual block of data either in memory, in a file, or in the HTTP Server API response-fragment cache.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_data_chunk">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK.DataChunkType">
            <summary>Type of data store. This member can be one of the values from the <b>HTTP_DATA_CHUNK_TYPE</b> enumeration.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE">
            <summary>Defines the data source for a data chunk.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_data_chunk_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromMemory">
            <summary>The data source is a memory data block. The union should be interpreted as a <b>FromMemory</b> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromFileHandle">
            <summary>The data source is a file handle data block. The union should be interpreted as a <b>FromFileHandle</b> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromFragmentCache">
            <summary>The data source is a fragment cache data block. The union should be interpreted as a <b>FromFragmentCache</b> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromFragmentCacheEx">
            <summary>
            <para>The data source is a fragment cache data block. The union should be interpreted as a <b>FromFragmentCacheEx</b> structure. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b>This flag is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_data_chunk_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE.HttpDataChunkTrailers">
            <summary>
            <para>The data source is a trailers data block. The union should be interpreted as a <b>Trailers</b> structure. <b>Windows 10, version 2004 and prior:  </b>This flag is not supported.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_data_chunk_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE.HttpDataChunkMaximum">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_ID">
            <summary>Describes property information for a delegate request.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_ID.DelegateRequestReservedProperty">
            <summary>This property is reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_ID.DelegateRequestDelegateUrlProperty">
            <summary>Specifies the property that provides the target url to which a delegated request should be delivered.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO">
            <summary>Describes additional property information when delegating a request.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO.PropertyId">
            <summary>
            <para>Type: **[HTTP_DELEGATE_REQUEST_PROPERTY_ID](./ne-http-http_delegate_request_property_id.md)** The type of property info pointed to by this struct.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_delegate_request_property_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO.PropertyInfoLength">
            <summary>
            <para>Type: **[ULONG](/windows/win32/winprog/windows-data-types)** The length in bytes of the value of the *PropertyInfo* parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_delegate_request_property_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO.PropertyInfo">
            <summary>
            <para>Type: **[PVOID](/windows/win32/winprog/windows-data-types)** A pointer to the property information.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_delegate_request_property_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID">
            <summary>Defines constants that specify an identifier for an HTTP feature.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID.HttpFeatureUnknown">
            <summary>Specifies an unknown feature.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID.HttpFeatureResponseTrailers">
            <summary>Specifies HTTP response trailers.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID.HttpFeatureApiTimings">
            <summary>Specifies HTTP API timings.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID.HttpFeatureDelegateEx">
            <summary>Specifies a request for delegation.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID.HttpFeaturemax">
            <summary>Specifies the maximum number of supported features.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID">
            <summary>The HTTP_HEADER_ID enumeration type lists known headers for HTTP requests and responses, and associates an array index with each such header.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_header_id">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderCacheControl">
            <summary>Used to specify caching behavior along the request or response chain, overriding the default caching algorithm.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderConnection">
            <summary>Allows the sender to specify options that are desired for that particular connection. These are used for a single connection only and must not be communicated by proxies over further connections.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderDate">
            <summary>The Date is a general header field that indicates the time that the request or response was sent.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderKeepAlive">
            <summary>
            <para>Based on the keepalive XML element (see <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>, section 12.12.1, page 66); a list of URIs included in the KeepAlive header must be "live" after they are copied (moved) to the destination.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_header_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderPragma">
            <summary>Used to include optional, implementation-specific directives that might apply to any recipient along the request/response chain.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderTrailer">
            <summary>Indicates that specified header fields are present in the trailer of a message encoded with chunked transfer-coding.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderTransferEncoding">
            <summary>Indicates what, if any, transformations have been applied to the message body in transit.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderUpgrade">
            <summary>Allows the client to specify one or more other communication protocols it would prefer to use if the server can comply.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderVia">
            <summary>The Via header field indicates the path taken by the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderWarning">
            <summary>This is a response header that contains the 3-digit warn code along with the reason phrase.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAllow">
            <summary>Lists the set of methods supported by the resource identified by the Request-URI.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentLength">
            <summary>The size of the message body in decimal bytes.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentType">
            <summary>The media type of the message body.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentEncoding">
            <summary>The encoding scheme for the message body.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentLanguage">
            <summary>Provides the natural language of the intended audience.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentLocation">
            <summary>Location of the resource for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource's URI.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentMd5">
            <summary>An MD5 digest of the entity-body used to provide end-to-end message integrity check (MIC) of the entity-body.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderContentRange">
            <summary>The content range header is sent with a partial entity body to specify where in the full entity body the partial body should be applied.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderExpires">
            <summary>The date and time after which the message content expires.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderLastModified">
            <summary>Indicates the date and time at which the origin server believes the variant was last modified.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAccept">
            <summary>Used with the INVITE, OPTIONS, and REGISTER methods to indicate what media types are acceptable in the response.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAcceptCharset">
            <summary>Indicates the character sets that are acceptable for the response.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAcceptEncoding">
            <summary>The content encodings that are acceptable in the response.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAcceptLanguage">
            <summary>Used by the client to indicate to the server which language it would prefer to receive reason phrases, session descriptions, or status responses.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAuthorization">
            <summary>The user-agent can authenticate itself with a server by sending the Authorization request header field with the request. The field contains the credentials for the domain that the user is requesting.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderCookie">
            <summary>The cookie request header contains data used to maintain client state with the server. Cookie data is obtained from a response sent with <b>HttpHeaderSetCookie</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderExpect">
            <summary>Indicates the specific server behaviors that are required by the client.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderFrom">
            <summary>The From header field specifies the initiator of the SIP request or response message.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderHost">
            <summary>Specifies the Internet host and port number of the requested resource. This is obtained from the original URI given by the user or referring resource.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderIfMatch">
            <summary>The If-Match request header field is used with a method to make it conditional. A client that has one or more entities previously obtained from the resource can verify that one of those entities is current by including a list of their associated entity tags in the If-Match header field.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderIfModifiedSince">
            <summary>The If-Modified-Since request header field is used with a method to make it conditional. If the requested variant has not been modified since the time specified in this field, an entity is  not  returned from the server; instead, a 304 (not modified) response is returned without any message-body.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderIfNoneMatch">
            <summary>
            <para>The If-None-Match request-header field is used with a method to make it conditional. When a client has obtained one or more entities from a resource, it can verify that none of those entities is current by including a list of their associated entity tags in the If-None-Match header field. The purpose of this feature is to allow efficient updates of cached information with a minimum amount of transaction overhead, and to prevent a method such as PUT from inadvertently modifying an existing resource when the client believes that the resource does not exist.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_header_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderIfRange">
            <summary>
            <para>If a client has a partial copy of an entity in its cache, and wishes to obtain an up-to-date copy of the entire entity, it can use the If-Range header. Informally, its meaning is, "if the entity is unchanged, send me the part(s) I am missing; otherwise, send me the entire new entity."</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_header_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderIfUnmodifiedSince">
            <summary>
            <para>The If-Unmodified-Since request-header field is used with a method to make it conditional. If the requested resource has not been modified since the time specified in this field, the server performs the requested operation as if the If-Unmodified-Since header were not present, but if the requested resource has been modified, the server returns a 412 error (Precondition Failed).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_header_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderMaxForwards">
            <summary>The maximum number of proxies or gateways that can forward the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderProxyAuthorization">
            <summary>This header field is used by the client to identify itself with a proxy.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderReferer">
            <summary>Allows the client to specify, for the server's benefit, the address (URI) of the resource from which the Request-URI was obtained.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderRange">
            <summary>Allows a client to request a part of an entity instead of the whole.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderTe">
            <summary>This header field contains the recipient of the SIP request or response message.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderTranslate">
            <summary>Allows the client to specify whether it wants the source representation or programmatic interpretation of the requested content.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderUserAgent">
            <summary>Indicates what extension transfer-codings the client accepts in the response and whether or not the client  accepts trailer fields in a chunked transfer-coding.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderRequestMaximum">
            <summary>Not a value that actually designates a header; instead, it is used to count the enumerated Request headers.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAcceptRanges">
            <summary>Allows the server to indicate its acceptance of range requests for a resource.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderAge">
            <summary>Conveys the sender's estimate of the amount of time since the response (or its revalidation) was generated at the origin server.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderEtag">
            <summary>Provides the current value of the entity tag for the requested variant.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderLocation">
            <summary>Used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderProxyAuthenticate">
            <summary>The response field that must be included as a part of the 407 response. The field includes the authentication scheme and parameters that apply to the proxy for this Request-URI.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderRetryAfter">
            <summary>The length of time that the service is expected to be unavailable to the requesting client.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderServer">
            <summary>This is a response header field that contains information about the server that is handling the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderSetCookie">
            <summary>The <b>set-cookie</b> response header contains data used to maintain client state in future requests sent with <b>HttpHeaderCookie</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderVary">
            <summary>Indicates the set of request header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderWwwAuthenticate">
            <summary>The WWW_Authenticate header field contains the authentication schemes and parameters applicable to the Request-URI.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderResponseMaximum">
            <summary>Not a value that actually designates a header; instead, it is used to count the enumerated Response headers.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID.HttpHeaderMaximum">
            <summary>Not a value that actually designates a header; instead, it is used to count all the enumerated headers.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_KNOWN_HEADER">
            <summary>Contains the header values for a known header from an HTTP request or HTTP response.</summary>
            <remarks>
            <para>In the HTTP Server API, known headers are defined as those that are enumerated in the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_header_id">HTTP_HEADER_ID</a> enumeration type. Be aware that there are different lists of different sizes for request and response headers. For more information about the structure and usage of HTTP headers, see the <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_known_header#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_KNOWN_HEADER.RawValueLength">
            <summary>Size, in bytes,  of the 8-bit string pointed to by the <b>pRawValue</b> member, not counting a terminating null character, if present. If <b>RawValueLength</b> is zero, then the value of the <b>pRawValue</b> element is meaningless.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_KNOWN_HEADER.pRawValue">
            <summary>
            <para>Pointer to the text of this HTTP header. Use <b>RawValueLength</b> to determine where this text ends rather than relying on the string to have a terminating null. The format of the header text is specified in <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_known_header#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.Networking.HttpServer.__HTTP_KNOWN_HEADER_41.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="M:Windows.Win32.Networking.HttpServer.__HTTP_KNOWN_HEADER_41.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.Networking.HttpServer.__HTTP_KNOWN_HEADER_41.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="P:Windows.Win32.Networking.HttpServer.__HTTP_KNOWN_HEADER_30.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="M:Windows.Win32.Networking.HttpServer.__HTTP_KNOWN_HEADER_30.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.Networking.HttpServer.__HTTP_KNOWN_HEADER_30.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA">
            <summary>Contains a value that specifies the type of the log data.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_log_data">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA.Type">
            <summary>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_log_data_type">HTTP_LOG_DATA_TYPE</a> enumeration value that specifies the type.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA_TYPE">
            <summary>Identifies the type of log data.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_log_data_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA_TYPE.HttpLogDataTypeFields">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_log_fields_data">HTTP_LOG_FIELDS_DATA</a> structure is used for logging a request. This structure is passed to an <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendhttpresponse">HttpSendHttpResponse</a> or <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendresponseentitybody">HttpSendResponseEntityBody</a> call.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_MULTIPLE_KNOWN_HEADERS">
            <summary>Specifies the headers that are included in an HTTP response when more than one header is required.</summary>
            <remarks>
            <para>The HTTP version 1.0 API allows applications to send only one known response header with the response. Starting with the HTTP version 2.0 API, applications are enabled to send multiple known response headers. The <b>pInfo</b>  member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_response_info">HTTP_RESPONSE_INFO</a> structure points to this structure when the application provides multiple known headers on a response. The <b>HTTP_RESPONSE_INFO</b> structure extends the <a href="https://docs.microsoft.com/windows/desktop/Http/http-response">HTTP_RESPONSE</a> structure starting with HTTP version 2.0. The <b>HTTP_MULTIPLE_KNOWN_HEADERS</b> structure enables server applications to send multiple authentication challenges to the client.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_multiple_known_headers#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_MULTIPLE_KNOWN_HEADERS.HeaderId">
            <summary>A member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_header_id">HTTP_HEADER_ID</a> enumeration specifying the response header ID.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_MULTIPLE_KNOWN_HEADERS.Flags">
            <summary>
            <para>The flags corresponding to the response header in the <b>HeaderId</b> member. This member is used only when the WWW-Authenticate header is present. This can be zero or the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_multiple_known_headers#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_MULTIPLE_KNOWN_HEADERS.KnownHeaderCount">
            <summary>The number of elements in  the array specified in the  <b>KnownHeaders</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_MULTIPLE_KNOWN_HEADERS.KnownHeaders">
            <summary>A pointer to the first element in the array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_known_header">HTTP_KNOWN_HEADER</a> structures.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS">
            <summary>Used by the property configuration structures to enable or disable a property on a configuration object when setting property configurations.</summary>
            <remarks>The property configuration structures are used in calls to <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetrequestqueueproperty">HttpSetRequestQueueProperty</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetserversessionproperty">HttpSetServerSessionProperty</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpseturlgroupproperty">HttpSetUrlGroupProperty</a> to set properties on the corresponding configuration objects. The configuration structures are also used in calls to <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryrequestqueueproperty">HttpQueryRequestQueueProperty</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryserversessionproperty">HttpQueryServerSessionProperty</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryurlgroupproperty">HttpQueryUrlGroupProperty</a>,  to query properties on the corresponding configuration object. When properties are set on the URL Group, server session, or request queue, this structure enables or disables the property. When properties are queried for the URL Group, server session, or request queue, this structure is used by the application to determine if the property is present. For more information, see the list of property configuration structures in the See Also section below.</remarks>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_INFO">
            <summary>Contains information about a QOS setting.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_qos_setting_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_INFO.QosType">
            <summary>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_qos_setting_type">HTTP_QOS_SETTING_TYPE</a> enumeration value that specifies the type of the QOS setting.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_INFO.QosSetting">
            <summary>A pointer to a structure that contains the setting.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_TYPE">
            <summary>Identifies the type of a QOS setting contained in a HTTP_QOS_SETTING_INFO structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_qos_setting_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_TYPE.HttpQosSettingTypeBandwidth">
            <summary>The setting is a bandwidth limit represented by a <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_bandwidth_limit_info">HTTP_BANDWIDTH_LIMIT_INFO</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_TYPE.HttpQosSettingTypeConnectionLimit">
            <summary>The setting is a connection limit represented by a <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_connection_limit_info">HTTP_CONNECTION_LIMIT_INFO</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_TYPE.HttpQosSettingTypeFlowRate">
            <summary>
            <para>A flow rate represented by <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_flowrate_info">HTTP_FLOWRATE_INFO</a>. <div class="alert"><b>Note</b>  Windows Server 2008 R2 and Windows 7 only.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_qos_setting_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO">
            <summary>Contains the authentication status of the request with a handle to the client token that the receiving process can use to impersonate the authenticated client.</summary>
            <remarks>
            <para>Starting with HTTP version 2.0, the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure  contains an <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_info">HTTP_REQUEST_INFO</a> structure. The <b>pVoid</b> member of the <b>HTTP_REQUEST_INFO</b> structure points to the <b>HTTP_REQUEST_AUTH_INFO</b> when the request information type is <b>HttpRequestInfoTypeAuth</b>. When the application receives a request with this structure and the request has not been authenticated, it can send the initial 401 challenge with the desired set of WWW-Authenticate headers in the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_multiple_known_headers">HTTP_MULTIPLE_KNOWN_HEADERS</a> structure. When the HTTP Server API completes  the authentication handshake, it fills  the <b>HTTP_REQUEST_AUTH_INFO</b> structure and passes it to the application with the request again. The handle to the access token that represents the client identity is provided in this structure by the HTTP Server API. Context Attributes The <b>ContextAttributes</b> member is provided for SSPI based schemes. For example, SSPI applications can determine whether <b>ASC_RET_MUTUAL_AUTH</b> is set for a mutually authenticated session. The HTTP Server API does not provide the expiration time for the context in the <b>PackedContext</b> member. Applications may require the expiration time  in specific  circumstances, for example, when NTLM credential caching is enabled and the application queries for the expiration time for a cached context. If the server application requires the expiration time for the underlying client context associated with the access token, it can receive the packed context and call <a href="https://docs.microsoft.com/windows/desktop/api/sspi/nf-sspi-querycontextattributesa">QueryContextAttributes</a> with the  <b>SECPKG_ATTR_LIFESPAN</b>. Mutual Authentication Data By default, the HTTP Server API ensures that the mutual authentication data is added to the final 200 response; in general, server applications are not responsible for sending the mutual authentication data. However, applications can receive the mutual authentication data and send it with the final response. When the <b>ReceiveMutualAuth</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_server_authentication_info">HTTP_SERVER_AUTHENTICATION_INFO</a> structure is set to true, applications receive the server credentials for mutual authentication along with the authenticated request. The mutual authentication data provided in the <b>pMutualAuthData</b> member contains the exact value of WWW-Authenticate header without the header name. For example, <b>pMutualAuthData</b> points to "Negotiate ade02938481eca". The application builds the WWW-Authenticate header by appending the provided <b>pMutualAuthData</b> as a response header value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_auth_info#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.AuthStatus">
            <summary>
            <para>A member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_auth_status">HTTP_AUTH_STATUS</a> enumeration that indicates the final authentication status of the request. If the authentication status is not <b>HttpAuthStatusSuccess</b>, applications should disregard members of this structure except <b>AuthStatus</b>, <b>SecStatus</b>, and <b>AuthType</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_auth_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.SecStatus">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/sspi/nf-sspi-acceptsecuritycontext">SECURITY_STATUS</a> value that indicates the security failure status when the <b>AuthStatus</b> member   is <b>HttpAuthStatusFailure</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.Flags">
            <summary>
            <para>The authentication flags that indicate the following authentication attributes: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_auth_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.AuthType">
            <summary>A member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_request_auth_type">HTTP_REQUEST_AUTH_TYPE</a> enumeration that indicates the authentication scheme attempted or established  for the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.AccessToken">
            <summary>
            <para>A  handle to the client token that the receiving process can use to impersonate the authenticated client. The handle to the token should be closed by calling <a href="https://docs.microsoft.com/windows/desktop/api/handleapi/nf-handleapi-closehandle">CloseHandle</a> when it is no longer required. This token is valid only for the lifetime of the request. Applications can regenerate the initial 401 challenge to reauthenticate when the token expires.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_auth_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.ContextAttributes">
            <summary>The client context attributes for the access token.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.PackedContextLength">
            <summary>The length, in bytes, of the <b>PackedContext</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.PackedContextType">
            <summary>The type of context in the <b>PackedContext</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.PackedContext">
            <summary>
            <para>The security context for the authentication type. Applications can query the attributes of the packed context by calling the SSPI <a href="https://docs.microsoft.com/windows/desktop/api/sspi/nf-sspi-querycontextattributesa">QueryContextAttributes</a> API. However, applications must acquire a  credential handle for the security package for the indicated AuthType. Application should call the SSPI <a href="https://docs.microsoft.com/windows/desktop/api/sspi/nf-sspi-freecontextbuffer">FreeContextBuffer</a> API to free the serialized context when it is no longer required.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_auth_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.MutualAuthDataLength">
            <summary>The length, in bytes, of the <b>pMutualAuthData</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.pMutualAuthData">
            <summary>The Base64 encoded mutual authentication data used in  the WWW-Authenticate header.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.PackageNameLength">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO.pPackageName">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE">
            <summary>The HTTP_REQUEST_AUTH_TYPE enumeration defines the authentication types supported by the HTTP Server API.This enumeration is used in the HTTP_REQUEST_AUTH_INFO structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_request_auth_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeNone">
            <summary>No authentication is attempted for the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeBasic">
            <summary>Basic authentication is attempted for the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeDigest">
            <summary>Digest authentication is attempted for the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeNTLM">
            <summary>NTLM authentication is attempted for the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeNegotiate">
            <summary>Negotiate authentication is attempted for the request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeKerberos">
            <summary>Kerberos authentication is attempted for the request.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS">
            <summary>Contains headers sent with an HTTP request.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_headers">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS.UnknownHeaderCount">
            <summary>A number of unknown headers sent with the HTTP request. This number is the size of the array pointed to by the <b>pUnknownHeaders</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS.pUnknownHeaders">
            <summary>
            <para>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_unknown_header">HTTP_UNKNOWN_HEADER</a> structures. This array contains one structure for each of the unknown headers sent in the HTTP request.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_headers#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS.TrailerCount">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS.pTrailers">
            <summary>This member is reserved and must be <b>NULL</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS.KnownHeaders">
            <summary>
            <para>Fixed-size array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_known_header">HTTP_KNOWN_HEADER</a> structures. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_header_id">HTTP_HEADER_ID</a> enumeration provides a mapping from header types to array indexes. If a known header of a given type is included in the HTTP request, the array element at the index that corresponds to that type specifies the header value. Those elements of the array for which no corresponding headers are present contain a zero-valued <b>RawValueLength</b> member. Use <b>RawValueLength</b> to determine the end of the header string pointed to by <b>pRawValue</b>, rather than relying on the string to have a terminating null.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_headers#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO">
            <summary>Extends the HTTP_REQUEST structure with additional information about the request.</summary>
            <remarks>Starting with the HTTP Server API version 2.0, the HTTP_REQUEST structure is extended to include an array of <b>HTTP_REQUEST_INFO</b> structures in the <b>pRequestInfo</b> member. These structures contain additional information for the  request.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO.InfoType">
            <summary>A member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_request_info_type">HTTP_REQUEST_INFO_TYPE</a> enumeration specifying the type of information contained in this structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO.InfoLength">
            <summary>The length, in bytes,  of the <b>pInfo</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO.pInfo">
            <summary>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_auth_info">HTTP_REQUEST_AUTH_INFO</a> structure when the <b>InfoType</b> member is <b>HttpRequestInfoTypeAuth</b>; otherwise <b>NULL</b>.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE">
            <summary>The HTTP_REQUEST_INFO_TYPE enumeration defines the type of information contained in the HTTP_REQUEST_INFO structure. This enumeration is used in the HTTP_REQUEST_INFO structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_request_info_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeAuth">
            <summary>
            <para>The request information type is authentication. The <b>pInfo</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_info">HTTP_REQUEST_INFO</a> structure points to a <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_auth_info">HTTP_REQUEST_AUTH_INFO</a> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_request_info_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeChannelBind">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeSslProtocol">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeSslTokenBindingDraft">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeSslTokenBinding">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY">
            <summary>Defines the properties that are configured by the HTTP Server API on a request.</summary>
            <remarks>The **HTTP\_REQUEST\_PROPERTY** enumeration types are used to set or query the configurations on a request. A member of this enumeration together with the associated configuration structure is used by [HttpSetRequestProperty](/windows/desktop/api/http/nf-http-httpsetrequestproperty) to define the configuration parameters.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY.HttpRequestPropertyStreamError">
            <summary>
            <para>The HTTP/2 or HTTP/3 stream error on the request. The [HTTP\_REQUEST\_PROPERTY\_STREAM\_ERROR](/windows/win32/api/http/ns-http-http_request_property_stream_error) structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_request_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY_STREAM_ERROR">
            <summary>The HTTP_REQUEST_PROPERTY_STREAM_ERROR structure represents an HTTP/2 or HTTP/3 stream error code.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_property_stream_error">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY_STREAM_ERROR.ErrorCode">
            <summary>The protocol stream error code.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1">
            <summary>Uses the HTTP_REQUEST structure to return data associated with a specific request.</summary>
            <remarks>The unprocessed URL contained in the <b>pRawUrl</b> member is for tracking and statistical purposes only. For other purposes, use the processed, canonical URL contained in the <b>CookedUrl</b> member.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.Flags">
            <summary>
            <para>A combination of zero or more of the following flag values may be combined, with OR, as appropriate. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.ConnectionId">
            <summary>
            <para>An identifier for the connection on which the request was received. Use this value when calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpwaitfordisconnect">HttpWaitForDisconnect</a> or <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceiveclientcertificate">HttpReceiveClientCertificate</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.RequestId">
            <summary>
            <para>A value used to identify the request when calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceiverequestentitybody">HttpReceiveRequestEntityBody</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendhttpresponse">HttpSendHttpResponse</a>, and/or <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendresponseentitybody">HttpSendResponseEntityBody</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.UrlContext">
            <summary>
            <para>The context that is associated with the URL in the <i>pRawUrl</i> parameter. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.Version">
            <summary>
            <para>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_version">HTTP_VERSION</a> structure that contains the version of HTTP specified by this request.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.Verb">
            <summary>
            <para>An HTTP verb associated with this request. This member can be one of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_verb">HTTP_VERB</a> enumeration.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.UnknownVerbLength">
            <summary>If the <b>Verb</b> member contains a value equal to <b>HttpVerbUnknown</b>, the <b>UnknownVerbLength</b> member contains the size, in bytes, of the string pointed to by the <b>pUnknownVerb</b> member, not including the terminating null character. If <b>Verb</b> is not equal to <b>HttpVerbUnknown</b>, <b>UnknownVerbLength</b> is equal to zero.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.RawUrlLength">
            <summary>The size, in bytes, of the unprocessed URL string pointed to by the <b>pRawUrl</b> member, not including the terminating null character.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.pUnknownVerb">
            <summary>If the <b>Verb</b> member is equal to <b>HttpVerbUnknown</b>, <b>pUnknownVerb</b>, points to a null-terminated string of octets that contains the HTTP verb for this request; otherwise, the application ignores this parameter.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.pRawUrl">
            <summary>A pointer to a string of octets that contains the original, unprocessed URL targeted by this request.  Use this unprocessed URL only for tracking or statistical purposes; the  <b>CookedUrl</b> member contains the canonical form of the URL for general use.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.CookedUrl">
            <summary>
            <para>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_cooked_url">HTTP_COOKED_URL</a> structure that contains a parsed canonical wide-character version of the URL targeted by this request. This is the version of the URL HTTP Listeners should act upon, rather than the raw URL.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.Address">
            <summary>
            <para>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_transport_address">HTTP_TRANSPORT_ADDRESS</a> structure that contains the transport addresses for the connection for this request.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.Headers">
            <summary>
            <para>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_headers">HTTP_REQUEST_HEADERS</a> structure that contains the headers specified in this request.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.BytesReceived">
            <summary>The total number of bytes received from the network comprising this request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.EntityChunkCount">
            <summary>The number of elements in the <b>pEntityChunks</b> array. If no entity body was copied, this value is zero.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.pEntityChunks">
            <summary>
            <para>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_data_chunk">HTTP_DATA_CHUNK</a> structures that contains the data blocks making up the entity body. <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceivehttprequest">HttpReceiveHttpRequest</a> does not copy the entity body unless called with the HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY flag set.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.RawConnectionId">
            <summary>Raw connection ID for an Secure Sockets Layer (SSL) request.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1.pSslInfo">
            <summary>
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_ssl_info">HTTP_SSL_INFO</a> structure that contains Secure Sockets Layer (SSL) information about the connection on which the request was received.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V2">
            <summary>Extends the HTTP_REQUEST_V1 request structure with more information about the request.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_request_v2">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V2.RequestInfoCount">
            <summary>The number of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_info">HTTP_REQUEST_INFO</a> structures in the array pointed to by <b>pRequestInfo</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V2.pRequestInfo">
            <summary>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_request_info">HTTP_REQUEST_INFO</a> structures that contains additional information about the request.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS">
            <summary>Contains the headers sent with an HTTP response.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_headers">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS.UnknownHeaderCount">
            <summary>A number of unknown headers sent with the HTTP response and contained in the array pointed to by the <b>pUnknownHeaders</b> member. This number cannot exceed 9999.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS.pUnknownHeaders">
            <summary>
            <para>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_unknown_header">HTTP_UNKNOWN_HEADER</a> structures that contains one structure for each of the unknown headers sent in the HTTP response.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_headers#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS.TrailerCount">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS.pTrailers">
            <summary>This member is reserved and must be <b>NULL</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS.KnownHeaders">
            <summary>
            <para>Fixed-size array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_known_header">HTTP_KNOWN_HEADER</a> structures. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_header_id">HTTP_HEADER_ID</a> enumeration provides a mapping from header types to array indexes. If a known header of a given type is included in the HTTP response, the array element at the index that corresponds to that type specifies the header value. Those elements of the array for which no corresponding headers are present contain a zero-valued <b>RawValueLength</b> member. Use <b>RawValueLength</b> to determine the end of the header string pointed to by <b>pRawValue</b>, rather than relying on the string to have a terminating null.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_headers#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO">
            <summary>Extends the HTTP_RESPONSE structure with additional information for the response.</summary>
            <remarks>Starting with the HTTP Server API version 2.0, the HTTP_RESPONSE structure is extended to include an array of <b>HTTP_RESPONSE_INFO</b> structures in the <b>pRequestInfo</b> member. These structures contain additional information for the  response.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO.Type">
            <summary>A member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_response_info_type">HTTP_RESPONSE_INFO_TYPE</a> enumeration specifying the type of information contained in this structure.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO.Length">
            <summary>The length, in bytes, of the <b>pInfo</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO.pInfo">
            <summary>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_multiple_known_headers">HTTP_MULTIPLE_KNOWN_HEADERS</a> structure when the <b>InfoType</b> member is <b>HttpResponseInfoTypeMultipleKnownHeaders</b>; otherwise <b>NULL</b>.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO_TYPE">
            <summary>The HTTP_RESPONSE_INFO_TYPE enumeration defines the type of information contained in the HTTP_RESPONSE_INFO structure.This enumeration is used in the HTTP_RESPONSE_INFO structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_response_info_type">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeMultipleKnownHeaders">
            <summary>
            <para>The response information type is authentication. The <b>pInfo</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_response_info">HTTP_RESPONSE_INFO</a> structure points to a <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_multiple_known_headers">HTTP_MULTIPLE_KNOWN_HEADERS</a> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_response_info_type#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeAuthenticationProperty">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeQoSProperty">
            <summary>Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_qos_setting_info">HTTP_QOS_SETTING_INFO</a> structure that contains information about a QOS setting.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeChannelBind">
            <summary>Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_channel_bind_info">HTTP_CHANNEL_BIND_INFO</a> structure that contains information on the channel binding token.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1">
            <summary>Contains data associated with an HTTP response.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_v1">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.Flags">
            <summary>The optional logging flags change the default response behavior.     These  can be one of any of the  <a href="https://docs.microsoft.com/windows/desktop/Http/http-response-flag--constants">HTTP_RESPONSE_FLAG</a> values.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.Version">
            <summary>This member is ignored; the response is always an HTTP/1.1 response.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.StatusCode">
            <summary>
            <para>Numeric status code that characterizes the result of the HTTP request (for example, 200 signifying "OK" or 404 signifying "Not Found"). For more information and a list of these codes, see Section 10 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>. If a request is directed to a URL that is reserved but not registered, indicating that the appropriate application to handle it is not running, then the HTTP Server API itself returns a response with status code 400, signifying "Bad Request". This is transparent to the application. A code 400 is preferred here to 503 ("Server not available") because the latter is interpreted by some smart load balancers as an indication that the server is overloaded.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.ReasonLength">
            <summary>Size, in bytes, of the string pointed to by the <b>pReason</b> member not including the terminating null. May be zero.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.pReason">
            <summary>A pointer to a human-readable, null-terminated string of printable characters that characterizes the result of the HTTP request (for example, "OK" or "Not Found").</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.Headers">
            <summary>
            <para>An <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_response_headers">HTTP_RESPONSE_HEADERS</a> structure that contains the headers used in this response.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.EntityChunkCount">
            <summary>A number of entity-body data blocks specified in the <b>pEntityChunks</b> array. This number cannot exceed 100. If the response has no entity body, this member must be zero.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1.pEntityChunks">
            <summary>
            <para>An array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_data_chunk">HTTP_DATA_CHUNK</a> structures that together specify all the data blocks that make up the entity body of the response.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_v1#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2">
            <summary>Extends the HTTP version 1.0 response structure with more information for the response.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_v2">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2.ResponseInfoCount">
            <summary>
            <para>The number of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_response_info">HTTP_RESPONSE_INFO</a> structures in the array pointed to by <b>pResponseInfo</b>. The count of the HTTP_RESPONSE_INFO elements in the array pointed to by <b>pResponseInfo</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_response_v2#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2.pResponseInfo">
            <summary>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_response_info">HTTP_RESPONSE_INFO</a> structures containing more information about the request.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS">
            <summary>The HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS structure contains the information for Basic authentication on a URL Group.This structure is contained in the HTTP_SERVER_AUTHENTICATION_INFO structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_basic_params">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS.RealmLength">
            <summary>The length, in bytes, of the <b>Realm</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS.Realm">
            <summary>
            <para>The realm used for Basic authentication. The realm allows the  server to be partitioned into a set of protection spaces, each with its own set of authentication schemes from the authentication database.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_basic_params#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS">
            <summary>Contains the information for digest authentication on a URL Group.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_digest_params">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS.DomainNameLength">
            <summary>The length, in bytes, of the <b>DomainName</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS.DomainName">
            <summary>
            <para>The domain name used for Digest authentication. If <b>NULL</b>, the client assumes the protection space consists of all the URIs under the responding server.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_digest_params#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS.RealmLength">
            <summary>The length, in bytes, of the <b>Realm</b> member.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS.Realm">
            <summary>
            <para>The realm used for Digest authentication. The realm allows the  server to be partitioned into a set of protection spaces, each with its own set of authentication schemes from the authentication database.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_digest_params#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO">
            <summary>Used to enable server-side authentication on a URL group or server session.</summary>
            <remarks>The <b>HTTP_SERVER_AUTHENTICATION_INFO</b> structure is included in the HTTP request if authentication has been configured on the associated URL group. The original HTTP authentication header received from the client is always included in the HTTP request, regardless of the authentication status.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.Flags">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_property_flags">HTTP_PROPERTY_FLAGS</a> structure that specifies if the property is present.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.AuthSchemes">
            <summary>
            <para>The supported authentication schemes. This can be one or more of the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.ReceiveMutualAuth">
            <summary>
            <para>A Boolean value that indicates, if <b>True</b>, that the client application receives the server credentials for mutual authentication with the authenticated request. If <b>False</b>, the client application does not receive the credentials. Be aware that this option is set for all  requests served by the associated request queue.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.ReceiveContextHandle">
            <summary>A Boolean value that indicates, if <b>True</b>, that the finalized client context is serialized and passed to the application with the request. If <b>False</b>, the application does not receive the context. This handle can be used to query context attributes.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.DisableNTLMCredentialCaching">
            <summary>
            <para>A Boolean value that indicates, if <b>True</b>, that the NTLM credentials are not cached. If <b>False</b>, the default behavior is preserved. By default,  HTTP caches the client context for Keep Alive (KA) connections for the NTLM scheme if the request did not originate from a proxy.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.ExFlags">
            <summary>
            <para>Optional authentication flags. Can be one or more of the following possible values: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_server_authentication_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.DigestParams">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_server_authentication_digest_params">HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS</a> structure that provides the domain and realm for the digest challenge.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO.BasicParams">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_server_authentication_basic_params">HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS</a> structure that provides the realm for the basic challenge.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY">
            <summary>Defines the properties that are configured by the HTTP Server API on a URL group, server session, or request queue.</summary>
            <remarks>The <b>HTTP_SERVER_PROPERTY</b> enumeration types are used to set or query the configurations on a server session, URL group, or request queue. A member of this enumeration together with the  associated configuration structure is used by <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryrequestqueueproperty">HttpQueryRequestQueueProperty</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryserversessionproperty">HttpQueryServerSessionProperty</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryurlgroupproperty">HttpQueryUrlGroupProperty</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetrequestqueueproperty">HttpSetRequestQueueProperty</a>, <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetserversessionproperty">HttpSetServerSessionProperty</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpseturlgroupproperty">HttpSetUrlGroupProperty</a> to define the configuration parameters.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerAuthenticationProperty">
            <summary>
            <para>The authentication property enables server-side authentication for a URL group, or  server session using the Basic, NTLM, Negotiate, and Digest authentication schemes. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_server_authentication_info">HTTP_SERVER_AUTHENTICATION_INFO</a>  structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerLoggingProperty">
            <summary>
            <para>The logging property enables logging for a server session or URL group. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_logging_info">HTTP_LOGGING_INFO</a> structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerQosProperty">
            <summary>
            <para>The QOS property enables settings affecting quality of service, such as limiting the maximum number of outstanding connections served for a URL group at any given time or limiting the response send bandwidth for a server session or URL group. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_qos_setting_info">HTTP_QOS_SETTING_INFO</a> structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerTimeoutsProperty">
            <summary>
            <para>The timeouts property  configures timeouts for a server session or URL group. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_timeout_limit_info">HTTP_TIMEOUT_LIMIT_INFO</a> structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerQueueLengthProperty">
            <summary>The connections property limits the number of requests in the request queue. This is a <b>ULONG</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerStateProperty">
            <summary>
            <para>The connections property configures the state of a URL group, server session, or request queue. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_state_info">HTTP_STATE_INFO</a> structure contains the configuration data for this property for the URL group or server session. The request queue uses the <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_enabled_state">HTTP_ENABLED_STATE</a> enumeration to configure this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServer503VerbosityProperty">
            <summary>
            <para>The 503 verbosity  property configures the verbosity level of 503 responses generated by the HTTP Server API for a request queue. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_503_response_verbosity">HTTP_503_RESPONSE_VERBOSITY</a> enumeration contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerBindingProperty">
            <summary>
            <para>The binding property associates a URL group with a  request queue. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_binding_info">HTTP_BINDING_INFO</a> structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerExtendedAuthenticationProperty">
            <summary>
            <para>The extended authentication property enables server-side authentication for a URL group, or  server session using the Kerberos authentication scheme. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_server_authentication_info">HTTP_SERVER_AUTHENTICATION_INFO</a>  structure contains the configuration data for this property.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerListenEndpointProperty">
            <summary>Listening endpoint property.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerChannelBindProperty">
            <summary>
            <para>This property implements authorization channel binding. The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_channel_bind_info">HTTP_CHANNEL_BIND_INFO</a> structure contains the authorization details.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_server_property#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY.HttpServerProtectionLevelProperty">
            <summary></summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO">
            <summary>Contains data about a Secure Sockets Layer (SSL) client certificate that can be used to determine whether the certificate is valid.</summary>
            <remarks>
            <para>An <b>HTTP_SSL_CLIENT_CERT_INFO</b> structure is pointed to by the <b>pClientCertInfo</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_ssl_info">HTTP_SSL_INFO</a> structure, and is used by the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceiveclientcertificate">HttpReceiveClientCertificate</a> function to return data about the client certificate through the <i>pSslClientCertInfo</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_ssl_client_cert_info#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO.CertFlags">
            <summary>
            <para>Flags that indicate whether the certificate is valid. The possible values for this member are a <a href="https://docs.microsoft.com/windows/desktop/SecAuthN/sspi-status-codes">SSPI Status Code</a> returned from SSPI or one of the following flags from the <b>dwError</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wincrypt/ns-wincrypt-cert_chain_policy_status">CERT_CHAIN_POLICY_STATUS</a> structure: <a id="CERT_E_EXPIRED"></a> <a id="cert_e_expired"></a></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_ssl_client_cert_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO.CertEncodedSize">
            <summary>The size, in bytes, of the certificate.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO.pCertEncoded">
            <summary>A pointer to the actual certificate.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO.Token">
            <summary>
            <para>A handle to an access token. If the HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER flag is set using the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetserviceconfiguration">HttpSetServiceConfiguration</a> function, and the client certificate was successfully mapped to an operating-system user account, then this member contains the handle to a valid <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-tokens">access token</a>. When the <b>HTTP_SSL_CLIENT_CERT_INFO</b> structure is no longer required, release this token explicitly by closing the handle.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_ssl_client_cert_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO.CertDeniedByMapper">
            <summary>Reserved.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO">
            <summary>Contains data for a connection that uses Secure Sockets Layer (SSL), obtained through the SSL handshake.</summary>
            <remarks>
            <para>An <b>HTTP_SSL_INFO</b> structure can be pointed to by the <b>pSslInfo</b> member of an <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_ssl_info#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.ServerCertKeySize">
            <summary>The size, in bytes, of the public key used to sign the server certificate.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.ConnectionKeySize">
            <summary>The size, in bytes, of the cipher key used to encrypt the current session.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.ServerCertIssuerSize">
            <summary>The size, in bytes, of the string pointed to by the <b>pServerCertIssuer</b> member not including the terminating null character.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.ServerCertSubjectSize">
            <summary>The size, in bytes, of the string pointed to by the <b>pServerCertSubject</b> member not including the terminating null character.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.pServerCertIssuer">
            <summary>A pointer to a null-terminated string of octets that specifies the name of the entity that issued the certificate.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.pServerCertSubject">
            <summary>A pointer to a null-terminated string of octets that specifies the name of the entity to which the certificate belongs.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.pClientCertInfo">
            <summary>
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_ssl_client_cert_info">HTTP_SSL_CLIENT_CERT_INFO</a> structure that specifies the client certificate.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_ssl_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO.SslClientCertNegotiated">
            <summary>If non-zero, indicates that the client certificate is already present locally.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO">
            <summary>Defines the application-specific connection timeout limits.</summary>
            <remarks>
            <para>This structure is used in the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpqueryserversessionproperty">HttpQueryServerSessionProperty</a>, and  <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetserversessionproperty">HttpSetServerSessionProperty</a> functions to set or query the connection timeouts. The following table lists the default timeouts. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_timeout_limit_info#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.Flags">
            <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_property_flags">HTTP_PROPERTY_FLAGS</a> structure that specifies whether the property is present.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.EntityBody">
            <summary>
            <para>The time, in seconds, allowed for the request entity body to arrive. The HTTP Server API turns on this timer when the request has an entity body. The timer expiration is initially set to the configured value. When the  HTTP Server API receives additional data indications on the request, it resets the timer to give the connection another interval.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_timeout_limit_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.DrainEntityBody">
            <summary>
            <para>The time, in seconds, allowed for the HTTP Server API to drain the entity body on a Keep-Alive connection. On a Keep-Alive connection, after the application has sent a response for a request and before the request entity body has completely arrived, the HTTP Server API starts draining the remainder of the entity body to reach another potentially pipelined request from the client. If the time to drain the remaining entity body exceeds the allowed period the connection is timed out.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_timeout_limit_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.RequestQueue">
            <summary>The time, in seconds, allowed  for the request to remain in the request queue before the application picks it up.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.IdleConnection">
            <summary>
            <para>The time, in seconds, allowed for an idle connection. This timeout is only enforced after the first request on the connection is routed to the application. For more information, see the Remarks section.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_timeout_limit_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.HeaderWait">
            <summary>
            <para>The time, in seconds, allowed for the HTTP Server API to  parse the request header. This timeout is only enforced after the first request on the connection is routed to the application. For more information, see the Remarks section.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_timeout_limit_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO.MinSendRate">
            <summary>
            <para>The minimum send rate, in bytes-per-second, for the response. The default response send rate is 150 bytes-per-second. To disable this timer, set <b>MinSendRate</b> to <b>MAXULONG</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_timeout_limit_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_TRANSPORT_ADDRESS">
            <summary>Specifies the addresses (local and remote) used for a particular HTTP connection.</summary>
            <remarks>Although the <b>pRemoteAddress</b> and <b>pLocalAddress</b> members are formally declared as <b>PSOCKADDR</b>, they are in fact <b>PSOCKADDR_IN</b> or <b>PSOCKADDR_IN6</b> types. Inspect the <b>sa_family</b> member, which is the same in all three structures, to determine how to access the address. If <b>sa_family</b> is equal to AF_INET, then the address is in IPv4 form and can be accessed by casting the members to <b>PSOCKADDR_IN</b>, but if <b>sa_family</b> equals AF_INET6, the address is in IPv6 form and you must cast them to <b>PSOCKADDR_IN6</b> before accessing the address. Both <b>pLocalAddress</b> and <b>pRemoteAddress</b> are always of the same type; that is they are either both of type <b>PSOCKADDR_IN</b> or both of type <b>PSOCKADDR_IN6</b>.</remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TRANSPORT_ADDRESS.pRemoteAddress">
            <summary>A pointer to the remote IP address associated with this connection. For more information about how to access this address, see the Remarks section.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_TRANSPORT_ADDRESS.pLocalAddress">
            <summary>A pointer to the local IP address associated with this connection. For more information about how to access this address, see the Remarks section.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_UNKNOWN_HEADER">
            <summary>Contains the name and value for a header in an HTTP request or response whose name does not appear in the enumeration.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_unknown_header">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_UNKNOWN_HEADER.NameLength">
            <summary>The size, in bytes, of the data pointed to by the <b>pName</b> member not counting a terminating null.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_UNKNOWN_HEADER.RawValueLength">
            <summary>The size, in bytes, of the data pointed to by the <b>pRawValue</b> member, in bytes.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_UNKNOWN_HEADER.pName">
            <summary>A pointer to a string of octets that specifies the header name. Use <b>NameLength</b> to determine the end of the string, rather than relying on a terminating <b>null</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_UNKNOWN_HEADER.pRawValue">
            <summary>A pointer to a string of octets that specifies the values for this header. Use <b>RawValueLength</b> to determine the end of the string, rather than relying on a terminating <b>null</b>.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_VERB">
            <summary>The HTTP_VERB enumeration type defines values that are used to specify known, standard HTTP verbs in the HTTP_REQUEST structure. The majority of these known verbs are documented in RFC 2616 and RFC 2518, as indicated below.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbUnparsed">
            <summary>Not relevant for applications; used only in kernel mode.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbUnknown">
            <summary>Indicates that the application can examine the <b>UnknownVerbLength</b> and <b>pUnknownVerb</b> members of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure to retrieve the HTTP verb for the request.  This is the case in an HTTP/1.1 request when a browser client specifies a custom verb.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbInvalid">
            <summary>Not relevant for applications; used only in kernel mode.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbOPTIONS">
            <summary>
            <para>The OPTIONS method requests information about the communication options  and requirements associated with a URI.</para>
            <para>See page 52 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbGET">
            <summary>
            <para>The GET method  retrieves the information or entity that is identified by the URI of the Request. If that URI refers to a script or other data-producing process, it is the data produced, not the text of the script, that is returned in the response. A GET method can be made conditional or partial by including a conditional  or Range header field in the request. A conditional GET requests that the entity be sent only if all conditions specified in the header are met, and a partial GET requests only part of the entity, as specified in the Range header. Both of these forms of GET can help avoid unnecessary network traffic.</para>
            <para>See page 53 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbHEAD">
            <summary>
            <para>The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body. The headers are the same as would be returned in response to a GET.</para>
            <para>See page 54 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbPOST">
            <summary>
            <para>The POST method is used to post a new entity as an addition to  a URI. The URI identifies an entity that  consumes the posted data in some fashion.</para>
            <para>See page 54 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbPUT">
            <summary>
            <para>The PUT method is used to replace an entity identified by a URI.</para>
            <para>See page 55 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbDELETE">
            <summary>
            <para>The DELETE method requests that a specified URI be deleted.</para>
            <para>See page 56 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbTRACE">
            <summary>
            <para>The TRACE method invokes a remote, application-layer loop-back of the request message. It allows the client to see what is being received at the other end of the request chain for diagnostic purposes. See page 56 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbCONNECT">
            <summary>
            <para>The CONNECT method can be used with a proxy that can dynamically switch to tunneling, as in the case of SSL tunneling. See page 57 of <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbTRACK">
            <summary>The TRACK method is used by Microsoft Cluster Server to implement a non-logged trace.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbMOVE">
            <summary>
            <para>The MOVE method requests a WebDAV operation equivalent to a copy (COPY), followed by consistency maintenance processing, followed by a delete of the source, where all three actions are performed atomically. When applied to a collection, "Depth" is assumed to be or must be specified as "infinity". See page 42 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbCOPY">
            <summary>
            <para>The COPY method requests a WebDAV operation that creates a duplicate of the source resource, identified by the Request URI, in the destination resource, identified by a URI specified in the Destination header. See page 37 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbPROPFIND">
            <summary>
            <para>The PROPFIND method requests a WebDAV operation that retrieves properties defined on the resource identified by the Request-URI. See page 24 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbPROPPATCH">
            <summary>
            <para>The PROPPATCH method requests a WebDAV operation that sets and/or removes properties defined on the resource identified by the Request-URI. See page 31 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbMKCOL">
            <summary>
            <para>The MKCOL method requests a WebDAV operation that creates a new collection resource at the location specified by the Request-URI. See page 33 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbLOCK">
            <summary>
            <para>The LOCK method requests a  WebDAV operation that creates a lock as specified by the lockinfo XML element on the Request-URI. See page 45 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbUNLOCK">
            <summary>
            <para>The UNLOCK method requests a WebDAV operation that removes a lock, identified by a lock token in the Lock-Token request header, from the resource identified by the Request-URI, and from all other resources included in the lock. See page 51 of <a href="https://www.ietf.org/rfc/rfc2518.txt">RFC 2518</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbSEARCH">
            <summary>
            <para>The SEARCH method requests a WebDAV operation used by Microsoft Exchange to search folders. See the Internet Engineering Task Force (IETF) Internet Draft WebDAV SEARCH for more information, and the <a href="http://www.webdav.org/">WebDAV Web site</a> for possible updates.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ne-http-http_verb#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERB.HttpVerbMaximum">
            <summary>Terminates the enumeration; is not used to define a verb.</summary>
        </member>
        <member name="T:Windows.Win32.Networking.HttpServer.HTTP_VERSION">
            <summary>Defines a version of the HTTP protocol that a request requires or a response provides.</summary>
            <remarks>
            <para>For more information about the HTTP protocol, see <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>. The following macros define various versions of the HTTP protocol:"#define HTTP_VERSION_UNKNOWN    { 0, 0 }""#define HTTP_VERSION_0_9        { 0, 9 }""#define HTTP_VERSION_1_0        { 1, 0 }""#define HTTP_VERSION_1_1        { 1, 1 }" The HTTP Server API provides a number of macros that can be used to evaluate the value of an HTTP_VERSION structure; For more information, see <a href="https://docs.microsoft.com/windows/desktop/Http/http-server-api-version-1-0-macros">HTTP Server API Version 1.0 Macros</a>. <div class="alert"><b>Note</b>  The HTTP Server API rejects a version of HTTP larger than 65,535 in either the major or minor portion. If a request includes such a version number, the HTTP Server API discards it and returns a response with status 400 ("Bad Request").</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/ns-http-http_version#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERSION.MajorVersion">
            <summary>Major version of the HTTP protocol.</summary>
        </member>
        <member name="F:Windows.Win32.Networking.HttpServer.HTTP_VERSION.MinorVersion">
            <summary>Minor version of the HTTP protocol.</summary>
        </member>
        <member name="P:Windows.Win32.Foundation.__CHAR_14.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="M:Windows.Win32.Foundation.__CHAR_14.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.__CHAR_14.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="T:Windows.Win32.Foundation.HRESULT">
            <remarks>
            <para>The **HRESULT** data type is the same as the [SCODE](scode.md) data type. An **HRESULT** value consists of the following fields: - A 1-bit code indicating severity, where zero represents success and 1 represents failure. - A 4-bit reserved value. - An 11-bit code indicating responsibility for the error or warning, also known as a facility code. - A 16-bit code describing the error or warning. Most MAPI interface methods and functions return **HRESULT** values to provide detailed cause formation. **HRESULT** values are also used widely in OLE interface methods. OLE provides several macros for converting between **HRESULT** values and **SCODE** values, another common data type for error handling. > [!NOTE] > In 64-bit MAPI, **HRESULT** is still a 32-bit value. For information about the OLE use of **HRESULT** values, see the  *OLE Programmer's Reference*. For more information about the use of these values in MAPI, see [Error Handling](error-handling-in-mapi.md) and any of the following interface methods: [IABLogon::GetLastError](iablogon-getlasterror.md) [IMAPISupport::GetLastError](imapisupport-getlasterror.md) [IMAPIControl::GetLastError](imapicontrol-getlasterror.md) [IMAPITable::GetLastError](imapitable-getlasterror.md) [IMAPIProp::GetLastError](imapiprop-getlasterror.md) [IMAPIViewAdviseSink::OnPrint](imapiviewadvisesink-onprint.md)</para>
            <para><see href="https://learn.microsoft.com/office/client-developer/outlook/mapi/hresult#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero"/> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this"/> <see cref="T:Windows.Win32.Foundation.HRESULT"/>, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)"/>
        </member>
        <member name="T:Windows.Win32.Foundation.PCSTR">
            <summary>
            A pointer to a null-terminated, constant, ANSI character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, decoding as UTF-8.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCSTR.ToString"/>
        </member>
        <member name="P:Windows.Win32.Foundation.PSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCWSTR.ToString"/>
        </member>
        <member name="P:Windows.Win32.Foundation.PWSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCWSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="P:Windows.Win32.__char_256.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_256.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_256.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_256.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_256.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_256.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_256.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "HTTPAPI.dll".
            </content>
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpAddUrlToUrlGroup(System.UInt64,System.String,System.UInt64)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpAddUrlToUrlGroup(System.UInt64,Windows.Win32.Foundation.PCWSTR,System.UInt64,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpAddUrlToUrlGroup(System.UInt64,Windows.Win32.Foundation.PCWSTR,System.UInt64,System.UInt32)">
            <summary>Adds the specified URL to the URL Group identified by the URL Group ID.</summary>
            <param name="UrlGroupId">The group ID for the URL group to which requests for the specified URL are routed. The URL group is created by the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreateurlgroup">HttpCreateUrlGroup</a> function.</param>
            <param name="pFullyQualifiedUrl">A pointer to a Unicode string that contains a properly formed <a href="https://docs.microsoft.com/windows/desktop/Http/urlprefix-strings">UrlPrefix String</a> that identifies the URL to be registered. If you are not running as an administrator, specify a port number greater than 1024, otherwise you may get an ERROR_ACCESS_DENIED error.</param>
            <param name="UrlContext">The context that is associated with the URL registered in this call. The URL context is returned in the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure with every request received on the URL specified in the <i>pFullyQualifiedUrl</i> parameter.</param>
            <param name="Reserved">Reserved. Must be zero.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b> If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The HTTP Server API supports existing applications using version 1.0 URL registrations, however, new development with the HTTP Server API should use <b>HttpAddUrlToUrlGroup</b>; <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpaddurl">HttpAddUrl</a> should not be used. An application can add multiple URLs to a URL group using repeated calls to <b>HttpAddUrlToUrlGroup</b>. Requests that match the specified  URL are routed to the request queue associated with the URL group. For more information about how the HTTP Server API matches request URLs to registered URLs, see <a href="https://docs.microsoft.com/windows/desktop/Http/urlprefix-strings">UrlPrefix Strings</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpaddurltourlgroup#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCancelHttpRequest(System.Runtime.InteropServices.SafeHandle,System.UInt64,System.Nullable{System.Threading.NativeOverlapped})">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpCancelHttpRequest(Windows.Win32.Foundation.HANDLE,System.UInt64,System.Threading.NativeOverlapped*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCancelHttpRequest(Windows.Win32.Foundation.HANDLE,System.UInt64,System.Threading.NativeOverlapped*)">
            <summary>The HttpCancelHttpRequest function cancels a specified reqest.</summary>
            <param name="RequestQueueHandle">A handle to the request queue from which the request came.</param>
            <param name="RequestId">The ID of the request to be canceled.</param>
            <param name="Overlapped">For asynchronous calls, set <i>pOverlapped</i> to point to an <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structure; for synchronous calls, set it to <b>NULL</b>.</param>
            <returns>If the function succeeds, it returns <b>NO_ERROR</b>.</returns>
            <remarks>When the **HttpCancelHttpRequest** function is used to cancel a request, the underlying transport connection used for the request will be closed.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCloseServerSession(System.UInt64)">
            <summary>Deletes the server session identified by the server session ID.</summary>
            <param name="ServerSessionId">The ID of the server session that is closed.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b> If the function fails, it can return one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Applications must call <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcloseurlgroup">HttpCloseUrlGroup</a> before calling <b>HttpCloseServerSession</b> to close the all the URL Groups associated with the server session.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCloseUrlGroup(System.UInt64)">
            <summary>Closes the URL Group identified by the URL Group ID.</summary>
            <param name="UrlGroupId">The ID of the URL Group that is deleted.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b>. If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>Applications must call <b>HttpCloseUrlGroup</b> before calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcloseserversession">HttpCloseServerSession</a> to close the all URL Groups associated with the server session.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCreateRequestQueue(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,System.String,System.Nullable{Windows.Win32.Security.SECURITY_ATTRIBUTES},System.UInt32,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpCreateRequestQueue(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Security.SECURITY_ATTRIBUTES*,System.UInt32,Windows.Win32.Foundation.HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCreateRequestQueue(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Security.SECURITY_ATTRIBUTES*,System.UInt32,Windows.Win32.Foundation.HANDLE*)">
            <summary>Creates a new request queue or opens an existing request queue.</summary>
            <param name="Version">
            <para>An HTTPAPI_VERSION structure indicating the request queue version. For  version 2.0, declare an instance of the structure and set it to the predefined value HTTPAPI_VERSION_2 before passing it to <b>HttpCreateRequestQueue</b>. The version must be 2.0; <b>HttpCreateRequestQueue</b> does not support  version 1.0 request queues.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreaterequestqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Name">
            <para>The name of the request queue. The length, in bytes, cannot exceed MAX_PATH. The optional name parameter allows other processes to access the request queue by name.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreaterequestqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="SecurityAttributes">
            <para>A pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that contains the  access permissions for the request queue. This parameter must be <b>NULL</b> when opening an existing request queue.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreaterequestqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>The flags parameter defines the scope of the request queue. This parameter can be one or more of the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreaterequestqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RequestQueueHandle">A pointer to a variable that receives a handle to the request queue.  This parameter must contain a valid pointer; it cannot be <b>NULL</b>.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b> If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The HTTP Server API supports existing applications using the version 1.0 request queues, however, new development with the HTTP Server API should use <b>HttpCreateRequestQueue</b> to create request queues; <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreatehttphandle">HttpCreateHttpHandle</a> should not be used. The version 2.0 API are only compatible with the version 2.0 request queues created by <b>HttpCreateRequestQueue</b>. The HTTP version 2 request queues require manual configuration; the application must create the URL Groups and associate one or more URL Group with the request queue by calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpseturlgroupproperty">HttpSetUrlGroupProperty</a> with the <b>HttpServerBindingProperty</b>. The application configures the request queue by calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetrequestqueueproperty">HttpSetRequestQueueProperty</a> with the    desired configuration in the <i>Property</i> parameter. For more information about creating and configuring URL groups, see  <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreateurlgroup">HttpCreateUrlGroup</a> and  <b>HttpSetUrlGroupProperty</b>. Security attributes may be supplied in <i>pSecurityAttributes</i> parameter only when the request queue is created. Only the  application that creates the request queue can set Access Control Lists (ACLs) on the request queue handle to allow processes (other than the creator application) permission to open, receive requests, and send responses on the request queue handle. By default, applications are not allowed to open a request queue unless they have been granted permission in the ACL. The creator process can optionally use the <b>HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER</b> flag to indicate that it does not want to receive http requests. <b>HttpCreateRequestQueue</b> allows applications to open an existing request queue with the <b>HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING</b> flag and retrieve the handle to the request queue. Non-controller applications can use this handle to perform HTTP I/O operations. Only the application that creates the request queue can set properties on it by calling the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetrequestqueueproperty">HttpSetRequestQueueProperty</a>. The handle to the request queue created by <b>HttpCreateRequestQueue</b> must be closed by calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcloserequestqueue">HttpCloseRequestQueue</a> before the application terminates or when the session is no longer required. Applications must call <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpinitialize">HttpInitialize</a> prior to calling <b>HttpCreateRequestQueue</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreaterequestqueue#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCreateServerSession(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpCreateServerSession(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,System.UInt64*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCreateServerSession(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,System.UInt64*,System.UInt32)">
            <summary>Creates a server session for the specified version.</summary>
            <param name="Version">
            <para>An HTTPAPI_VERSION structure that indicates the version of the server session. For  version 2.0, declare an instance of the structure and set it to the predefined value <b>HTTPAPI_VERSION_2</b> before passing it to <b>HttpCreateServerSession</b>. The version must be 2.0; <b>HttpCreateServerSession</b> does not support  version 1.0 request queues.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreateserversession#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ServerSessionId">A pointer to the variable that receives the ID of the server session.</param>
            <param name="Reserved">Reserved. Must be zero.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b>. If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Server sessions own a set of URL Groups. They are top-level configuration containers for configuration information that applies to all of the URL Groups created under them. For more information about configuring a server session, see <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsetserversessionproperty">HttpSetServerSessionProperty</a>. The HTTP Server API does not support asynchronous I/O for server sessions. When the server session is no longer required, or before the application terminates, application must delete the server session by calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcloseserversession">HttpCloseServerSession</a>. When a server session is deleted all of the associated URL Groups are also automatically deleted.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreateserversession#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCreateUrlGroup(System.UInt64,System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpCreateUrlGroup(System.UInt64,System.UInt64*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpCreateUrlGroup(System.UInt64,System.UInt64*,System.UInt32)">
            <summary>Creates a URL Group under the specified server session.</summary>
            <param name="ServerSessionId">The identifier of the server session under which the URL Group is created.</param>
            <param name="pUrlGroupId">A pointer to the variable that receives the ID of the URL Group.</param>
            <param name="Reserved">Reserved. Must be zero.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b> If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>URL Groups are configuration containers for a set of URLs. They are created under the server session and inherit the configuration settings of the server session. When a configuration parameter is set on the URL Group, it overrides the configuration set on the server session. For more information about the setting configurations for the URL Group, see <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpseturlgroupproperty">HttpSetUrlGroupProperty</a>. After the URL group is created it must be associated with a request queue to receive requests. To associate the URL Group with a request queue, the application calls <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpseturlgroupproperty">HttpSetUrlGroupProperty</a> with the <b>HttpServerBindingProperty</b> property. If this property is not set, matching requests for the URL Group are not delivered to a request queue and the  HTTP Server API generates a 503 response. The URL Group association with a request queue is dynamic. The association with the servers session cannot be changed until either the server session or the URL Group is deleted. When a server session is deleted all of the associated URL Groups are also automatically closed. The URL Group is initially created as an empty group. URLs must be added to the group by calling <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpaddurltourlgroup">HttpAddUrlToUrlGroup</a>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpcreateurlgroup#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpDelegateRequestEx(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle,System.UInt64,System.UInt64,System.UInt32,Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpDelegateRequestEx(Windows.Win32.Foundation.HANDLE,Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt64,System.UInt32,Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpDelegateRequestEx(Windows.Win32.Foundation.HANDLE,Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt64,System.UInt32,Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO*)">
            <summary>Delegates a request from the source request queue to the target request queue.</summary>
            <param name="RequestQueueHandle">
            <para>Type: \_In\_ **[HANDLE](/windows/win32/winprog/windows-data-types)** A handle to the source request queue.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpdelegaterequestex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DelegateQueueHandle">
            <para>Type: \_In\_ **[HANDLE](/windows/win32/winprog/windows-data-types)** A handle to the target request queue.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpdelegaterequestex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RequestId">
            <para>Type: \_In\_ **HTTP_REQUEST_ID** A unique request ID received with [HttpReceiveHttpRequest](/windows/win32/api/http/nf-http-httpreceivehttprequest).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpdelegaterequestex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DelegateUrlGroupId">
            <para>Type: \_In\_ **HTTP_URL_GROUP_ID** The url group id of the target url group.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpdelegaterequestex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PropertyInfoSetSize">
            <para>Type: \_In\_ **[ULONG](/windows/win32/winprog/windows-data-types)** The number of entries in the *PropertyInfoSet* array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpdelegaterequestex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PropertyInfoSet">
            <para>Type: \_In\_ [**PHTTP_DELEGATE_REQUEST_PROPERTY_INFO](/windows/win32/api/http/ns-http-http_delegate_request_property_info)** An array of properties to be set on request when delegating.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpdelegaterequestex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>A **[ULONG](/windows/win32/winprog/windows-data-types)** containing an [NTSTATUS](/openspecs/windows_protocols/ms-erref/87fba13e-bf06-450e-83b1-9241dc81e781) completion status.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpFindUrlGroupId(System.String,System.Runtime.InteropServices.SafeHandle,System.UInt64@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpFindUrlGroupId(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.HANDLE,System.UInt64*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpFindUrlGroupId(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.HANDLE,System.UInt64*)">
            <summary>Retrieves a URL group ID for a URL and a request queue.</summary>
            <param name="FullyQualifiedUrl">
            <para>Type: \_In\_ **[PCWSTR](/windows/win32/winprog/windows-data-types)** The URL whose URL group to query.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpfindurlgroupid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RequestQueueHandle">
            <para>Type: \_In\_ **[HANDLE](/windows/win32/winprog/windows-data-types)** The request queue associated with the URL group.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpfindurlgroupid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="UrlGroupId">
            <para>Type: \_Out\_ **PHTTP_URL_GROUP_ID** The matching URL group ID.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpfindurlgroupid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>A **[ULONG](/windows/win32/winprog/windows-data-types)** containing an [NTSTATUS](/openspecs/windows_protocols/ms-erref/87fba13e-bf06-450e-83b1-9241dc81e781) completion status.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpInitialize(Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION,Windows.Win32.Networking.HttpServer.HTTP_INITIALIZE,System.Void*)">
            <summary>The HttpInitialize function initializes the HTTP Server API driver, starts it, if it has not already been started, and allocates data structures for the calling application to support response-queue creation and other operations.</summary>
            <param name="Version">
            <para>HTTP version. This parameter is an <a href="https://docs.microsoft.com/windows/win32/api/http/ns-http-httpapi_version">HTTPAPI_VERSION</a> structure. For the current version, declare an instance of the structure and set it to the pre-defined value **HTTPAPI_VERSION_1** before passing it to <b>HttpInitialize</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpinitialize#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags"></param>
            <param name="pReserved">This parameter is reserved, and must be <b>NULL</b>.</param>
            <returns>
            <para>If the function succeeds, then the return value is **NO_ERROR**. If the function fails, then the return value is one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>Call <a href="https://docs.microsoft.com/windows/win32/api/http/nf-http-httpterminate">HttpTerminate</a> when the application completes. All the same flags that were passed to <b>HttpInitialize</b> in the <i>Flags</i> parameter must also be passed to <b>HttpTerminate</b>. An application can call <b>HttpInitialize</b> repeatedly, provided that each call to <b>HttpInitialize</b> is later matched by a corresponding call to <b>HttpTerminate</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpinitialize#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpIsFeatureSupported(Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID)">
            <summary>Checks whether a particular feature is supported.</summary>
            <param name="FeatureId">
            <para>Type: \_In\_ **[HTTP_FEATURE_ID](./ne-http-http_feature_id.md)** The identifier of the feature.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpisfeaturesupported#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>`TRUE` if the feature is supported, otherwise `FALSE`.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpReceiveRequestEntityBody(System.Runtime.InteropServices.SafeHandle,System.UInt64,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Nullable{System.Threading.NativeOverlapped})">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpReceiveRequestEntityBody(Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Threading.NativeOverlapped*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpReceiveRequestEntityBody(Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Threading.NativeOverlapped*)">
            <summary>Receives additional entity body data for a specified HTTP request.</summary>
            <param name="RequestQueueHandle">
            <para>The handle to the request queue from which to retrieve the specified entity body data. A request queue is created and its handle returned by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreaterequestqueue">HttpCreateRequestQueue</a> function. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b>The handle to the request queue is created by the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreatehttphandle">HttpCreateHttpHandle</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpreceiverequestentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RequestId">
            <para>The identifier of the HTTP request that contains the retrieved entity body. This value is returned in the <b>RequestId</b> member of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceivehttprequest">HttpReceiveHttpRequest</a> function. This value cannot be <b>HTTP_NULL_ID</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpreceiverequestentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>This parameter can be the following flag value. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b>This parameter is reserved and must be zero. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpreceiverequestentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="EntityBuffer">A pointer to a buffer that receives entity-body data.</param>
            <param name="EntityBufferLength">The size, in bytes, of the buffer pointed to by the <i>pBuffer</i> parameter.</param>
            <param name="BytesReturned">
            <para>Optional. A pointer to a variables that receives the size, in bytes, of the entity body data returned in the <i>pBuffer</i> buffer.</para>
            <para>When making an asynchronous call using <i>pOverlapped</i>, set <i>pBytesReceived</i> to <b>NULL</b>. Otherwise, when <i>pOverlapped</i> is set to <b>NULL</b>, <i>pBytesReceived</i> must contain a valid memory address, and not be set to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpreceiverequestentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Overlapped">
            <para>For asynchronous calls, set <i>pOverlapped</i> to point to an <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structure; for synchronous calls, set it to <b>NULL</b>.</para>
            <para>A synchronous call blocks until the entity-body data has been retrieved, whereas an asynchronous call immediately returns <b>ERROR_IO_PENDING</b> and the calling application then uses <a href="https://docs.microsoft.com/windows/desktop/api/ioapiset/nf-ioapiset-getoverlappedresult">GetOverlappedResult</a> or I/O completion ports to determine when the operation is completed. For more information about using <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structures for synchronization, see <a href="https://docs.microsoft.com/windows/desktop/Sync/synchronization-and-overlapped-input-and-output">Synchronization and Overlapped Input and Output</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpreceiverequestentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <b>NO_ERROR</b>. If the function is used asynchronously, a return value of <b>ERROR_IO_PENDING</b> indicates that the next request is not yet ready and is retrieved later through normal overlapped I/O completion mechanisms. If the function fails, the return value is one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>To retrieve an entire entity body, an application is expected to call <b>HttpReceiveRequestEntityBody</b>, passing in new buffers, until the function returns <b>ERROR_HANDLE_EOF</b>. As long as a buffer full of entity-body data is copied successfully and there is still more entity-body data waiting to be retrieved, the function returns <b>NO_ERROR</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpreceiverequestentitybody#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpRemoveUrlFromUrlGroup(System.UInt64,System.String,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpRemoveUrlFromUrlGroup(System.UInt64,Windows.Win32.Foundation.PCWSTR,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpRemoveUrlFromUrlGroup(System.UInt64,Windows.Win32.Foundation.PCWSTR,System.UInt32)">
            <summary>Removes the specified URL from the group identified by the URL Group ID.</summary>
            <param name="UrlGroupId">The ID of the URL group from which the URL specified in <i>pFullyQualifiedUrl</i> is removed.</param>
            <param name="pFullyQualifiedUrl">
            <para>A pointer to a Unicode string that contains a properly formed <a href="https://docs.microsoft.com/windows/desktop/Http/urlprefix-strings">UrlPrefix String</a> that identifies the URL to be removed. When <b>HTTP_URL_FLAG_REMOVE_ALL</b> is passed in the <i>Flags</i> parameter, all of the existing URL registrations for the URL Group identified in <i>UrlGroupId</i> are removed from the group. In this case, <i>pFullyQualifiedUrl</i> must be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpremoveurlfromurlgroup#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>The URL flags qualifying the URL that is removed. This  can be one of the following flags: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpremoveurlfromurlgroup#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, it returns NO_ERROR. If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The HTTP Server API supports existing applications using the version 1.0 URL registrations, however, new development with the HTTP Server API should use <b>HttpRemoveUrlFromUrlGroup</b>; do not use <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpremoveurl">HttpRemoveUrl</a>. Applications should remove the URL added to the group by <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpaddurltourlgroup">HttpAddUrlToUrlGroup</a>, when the URL is no longer required.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpremoveurlfromurlgroup#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSendHttpResponse(System.Runtime.InteropServices.SafeHandle,System.UInt64,System.UInt32,Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2@,System.Nullable{Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY},System.UInt32*,System.Nullable{System.Threading.NativeOverlapped},System.Nullable{Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA})">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpSendHttpResponse(Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt32,Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2*,Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY*,System.UInt32*,System.Void*,System.UInt32,System.Threading.NativeOverlapped*,Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSendHttpResponse(Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt32,Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2*,Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY*,System.UInt32*,System.Void*,System.UInt32,System.Threading.NativeOverlapped*,Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA*)">
            <summary>Sends an HTTP response to the specified HTTP request.</summary>
            <param name="RequestQueueHandle">
            <para>A handle to the request queue from which the specified request was retrieved. A request queue is created and its handle returned by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreaterequestqueue">HttpCreateRequestQueue</a> function. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b>The handle to the request queue is created by the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreatehttphandle">HttpCreateHttpHandle</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RequestId">
            <para>An identifier of the HTTP request to which this response corresponds. This value is returned in the <b>RequestId</b> member of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceivehttprequest">HttpReceiveHttpRequest</a> function. This value cannot be <b>HTTP_NULL_ID</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>This parameter can be a combination of some of the following flag values.  Those that are mutually exclusive are marked accordingly. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="HttpResponse">
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/Http/http-response">HTTP_RESPONSE</a> structure that defines the HTTP response.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="CachePolicy">
            <para>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_cache_policy">HTTP_CACHE_POLICY</a> structure used to cache the response. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b>This parameter is reserved and must be <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytesSent">
            <para>Optional. A pointer to a variable that receives the number, in bytes, sent if the function operates synchronously. When making an asynchronous call using <i>pOverlapped</i>, set <i>pBytesSent</i> to <b>NULL</b>. Otherwise, when <i>pOverlapped</i> is set to <b>NULL</b>, <i>pBytesSent</i> must contain a valid memory address and not be set to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Reserved1">This parameter is reserved and must be <b>NULL</b>.</param>
            <param name="Reserved2">This parameter is reserved and must be zero.</param>
            <param name="Overlapped">
            <para>For asynchronous calls, set <i>pOverlapped</i> to point to an <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structure; for synchronous calls, set  to <b>NULL</b>. A synchronous call blocks until all response data specified in the <i>pHttpResponse</i> parameter is sent, whereas an asynchronous call immediately returns <b>ERROR_IO_PENDING</b> and the calling application then uses <a href="https://docs.microsoft.com/windows/desktop/api/ioapiset/nf-ioapiset-getoverlappedresult">GetOverlappedResult</a> or I/O completion ports to determine when the operation is completed. For more information about using <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structures for synchronization, see <a href="https://docs.microsoft.com/windows/desktop/Sync/synchronization-and-overlapped-input-and-output">Synchronization and Overlapped Input and Output</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="LogData">
            <para>A pointer to the  <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_log_data">HTTP_LOG_DATA</a> structure used to log the response. Pass a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_log_fields_data">HTTP_LOG_FIELDS_DATA</a> structure and cast it to <b>PHTTP_LOG_DATA</b>. Be aware that even when logging is enabled on a URL Group, or server session, the response will not be logged unless the application supplies the log fields data structure. <b>Windows Server 2003 and Windows XP with SP2:  </b>This parameter is reserved and must be <b>NULL</b>. <b>Windows Vista and Windows Server 2008:  </b>This parameter is new for Windows Vista, and Windows Server 2008</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <b>NO_ERROR</b>. If the function is used asynchronously, a return value of <b>ERROR_IO_PENDING</b> indicates that the next request is not yet ready and is retrieved later through normal overlapped I/O completion mechanisms. If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The <b>HttpSendHttpResponse</b> function is used to create and send a response header, and the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendresponseentitybody">HttpSendResponseEntityBody</a> function can be used to send entity-body data as required. If neither a content-length header nor a transfer-encoding header is included with the response, the application must indicate the end of the response by explicitly closing the connection by using the <b>HTTP_SEND_RESPONSE_DISCONNECT</b> flag. If an application specifies a "Server:" header in a response,  using the <b>HttpHeaderServer</b> identifier in the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_known_header">HTTP_KNOWN_HEADER</a> structure, that specified value is placed as the first part of the header, followed by a space and then "Microsoft-HTTPAPI/1.0". If no server header is specified, <b>HttpSendHttpResponse</b> supplies "Microsoft-HTTPAPI/1.0" as the server header. <div class="alert"><b>Note</b>  The <b>HttpSendHttpResponse</b> and <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendresponseentitybody">HttpSendResponseEntityBody</a> function must not be called simultaneously from different threads on the same <i>RequestId</i>.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendhttpresponse#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSendResponseEntityBody(System.Runtime.InteropServices.SafeHandle,System.UInt64,System.UInt32,System.Span{Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK},System.UInt32*,System.Nullable{System.Threading.NativeOverlapped},System.Nullable{Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA})">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpSendResponseEntityBody(Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt32,System.UInt16,Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK*,System.UInt32*,System.Void*,System.UInt32,System.Threading.NativeOverlapped*,Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSendResponseEntityBody(Windows.Win32.Foundation.HANDLE,System.UInt64,System.UInt32,System.UInt16,Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK*,System.UInt32*,System.Void*,System.UInt32,System.Threading.NativeOverlapped*,Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA*)">
            <summary>Sends entity-body data associated with an HTTP response.</summary>
            <param name="RequestQueueHandle">
            <para>A handle to the request queue from which the specified request was retrieved. A request queue is created and its handle returned by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreaterequestqueue">HttpCreateRequestQueue</a> function. <b>Windows Server 2003 with SP1 and Windows XP with SP2:  </b>The handle to the request queue is created by the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreatehttphandle">HttpCreateHttpHandle</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="RequestId">
            <para>An identifier of the HTTP request to which this response corresponds. This value is returned in the <b>RequestId</b> member of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa364545(v=vs.85)">HTTP_REQUEST</a> structure by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpreceivehttprequest">HttpReceiveHttpRequest</a> function. It cannot be <b>HTTP_NULL_ID</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Flags">
            <para>A parameter that can include  one of the following mutually exclusive flag values. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="EntityChunkCount">A number of structures in the array pointed to by <i>pEntityChunks</i>. This count cannot exceed 9999.</param>
            <param name="EntityChunks">
            <para>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_data_chunk">HTTP_DATA_CHUNK</a> structures to be sent as entity-body data.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="BytesSent">
            <para>Optional. A pointer to a variable that receives the number, in bytes, sent if the function operates synchronously. When making an asynchronous call using <i>pOverlapped</i>, set <i>pBytesSent</i> to <b>NULL</b>. Otherwise, when <i>pOverlapped</i> is set to <b>NULL</b>, <i>pBytesSent</i> must contain a valid memory address, and not be set to <b>NULL</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Reserved1">This parameter is reserved and must be <b>NULL</b>.</param>
            <param name="Reserved2">This parameter is reserved and must be zero.</param>
            <param name="Overlapped">
            <para>For asynchronous calls, set <i>pOverlapped</i> to point to an <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structure; for synchronous calls, set it to <b>NULL</b>. A synchronous call blocks until all response data specified in the <i>pEntityChunks</i> parameter is sent, whereas an asynchronous call immediately returns <b>ERROR_IO_PENDING</b> and the calling application then uses <a href="https://docs.microsoft.com/windows/desktop/api/ioapiset/nf-ioapiset-getoverlappedresult">GetOverlappedResult</a> or I/O completion ports to determine when the operation is completed. For more information about using <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structures for synchronization, see <a href="https://docs.microsoft.com/windows/desktop/Sync/synchronization-and-overlapped-input-and-output">Synchronization and Overlapped Input and Output</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="LogData">
            <para>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_log_data">HTTP_LOG_DATA</a> structure used to log the response. Pass a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/http/ns-http-http_log_fields_data">HTTP_LOG_FIELDS_DATA</a> structure and cast it to <b>PHTTP_LOG_DATA</b>. Be aware that even when logging is enabled on a URL Group, or server session, the response will not be logged unless the application supplies the log fields data structure. <b>Windows Server 2003 and Windows XP with SP2:  </b>This parameter is reserved and must be <b>NULL</b>. <b>Windows Vista and Windows Server 2008:  </b>This parameter is new for Windows Vista, and Windows Server 2008</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <b>NO_ERROR</b>. If the function is used asynchronously, a return value of <b>ERROR_IO_PENDING</b> indicates that the next request is not yet ready and is retrieved later through normal overlapped I/O completion mechanisms. If the function fails, the return value is one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>If neither a Content-length header nor a Transfer-encoding header is included in the response headers, the application must indicate the end of the response by explicitly closing the connection using the <b>HTTP_SEND_RESPONSE_DISCONNECT</b> flag. <div class="alert"><b>Note</b>  <b>HttpSendResponseEntityBody</b> (or <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpsendhttpresponse">HttpSendHttpResponse</a>) and <b>HttpSendResponseEntityBody</b> must not be called simultaneously from different threads on the same <i>RequestId</i>.</div> <div> </div></para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsendresponseentitybody#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSetRequestQueueProperty(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY,System.Void*,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.HttpSetRequestQueueProperty(Windows.Win32.Foundation.HANDLE,Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY,System.Void*,System.UInt32,System.UInt32,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSetRequestQueueProperty(Windows.Win32.Foundation.HANDLE,Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY,System.Void*,System.UInt32,System.UInt32,System.Void*)">
            <summary>Sets a new property or modifies an existing property on the request queue identified by the specified handle.</summary>
            <param name="RequestQueueHandle">
            <para>The handle to the request queue on which the property is set. A request queue is created and its handle returned by a call to the <a href="https://docs.microsoft.com/windows/desktop/api/http/nf-http-httpcreaterequestqueue">HttpCreateRequestQueue</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsetrequestqueueproperty#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Property">
            <para>A member of the  <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_server_property">HTTP_SERVER_PROPERTY</a> enumeration describing the property type that is set. This must be one of the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsetrequestqueueproperty#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PropertyInformation">
            <para>A pointer to the buffer that contains the property information. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsetrequestqueueproperty#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PropertyInformationLength">The length, in bytes, of the buffer pointed to by the <i>pPropertyInformation</i> parameter.</param>
            <param name="Reserved1">Reserved. Must be zero.</param>
            <param name="Reserved2">Reserved. Must be <b>NULL</b>.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b>. If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpsetrequestqueueproperty">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HttpSetUrlGroupProperty(System.UInt64,Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY,System.Void*,System.UInt32)">
            <summary>Sets a new property or modifies an existing property on the specified URL Group.</summary>
            <param name="UrlGroupId">The ID of the URL Group for which the property is set.</param>
            <param name="Property">
            <para>A member of the  <a href="https://docs.microsoft.com/windows/desktop/api/http/ne-http-http_server_property">HTTP_SERVER_PROPERTY</a> enumeration that describes the property type that is modified or set. This can be one of the following: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpseturlgroupproperty#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PropertyInformation">
            <para>A pointer to the buffer that contains the property information. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/http/nf-http-httpseturlgroupproperty#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="PropertyInformationLength">The length, in bytes, of the buffer pointed to by the <i>pPropertyInformation</i> parameter.</param>
            <returns>
            <para>If the function succeeds, it returns <b>NO_ERROR</b>. If the function fails, it returns one of the following error codes. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>After the URL Group is created it must be associated with a request queue to receive requests. To associate the URL Group with a request queue, the application calls <b>HttpSetUrlGroupProperty</b> with the <b>HttpServerBindingProperty</b> property. If this property is not set, matching requests for the URL Group are not delivered to a request queue and the  HTTP Server API generates a 503 response.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para>The <b>CloseHandle</b> function closes handles to the following objects: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/handleapi/nf-handleapi-closehandle#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetFileCompletionNotificationModes(System.Runtime.InteropServices.SafeHandle,System.Byte)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SetFileCompletionNotificationModes(Windows.Win32.Foundation.HANDLE,System.Byte)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetFileCompletionNotificationModes(Windows.Win32.Foundation.HANDLE,System.Byte)">
            <summary>Sets the notification modes for a file handle, allowing you to specify how completion notifications work for the specified file.</summary>
            <param name="FileHandle">A handle to the file.</param>
            <param name="Flags">
            <para>The modes to be set.  One or more modes can be set at the same time; however, after a mode has been set for a file handle, it cannot be removed. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-setfilecompletionnotificationmodes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Returns nonzero if successful or zero otherwise. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>To compile an application that uses this function, define the <b>_WIN32_WINNT</b> macro as 0x0600 or later. For more information, see <a href="https://docs.microsoft.com/windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>. In Windows 8 and Windows Server 2012, this function is supported by the following technologies. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-setfilecompletionnotificationmodes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Security.SECURITY_ATTRIBUTES">
            <summary>The SECURITY_ATTRIBUTES structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.nLength">
            <summary>The size, in bytes, of this structure. Set this value to the size of the **SECURITY\_ATTRIBUTES** structure.</summary>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            <para>A pointer to a [**SECURITY\_DESCRIPTOR**](../winnt/ns-winnt-security_descriptor.md) structure that controls access to the object. If the value of this member is **NULL**, the object is assigned the default security descriptor associated with the [*access token*](/windows/win32/secauthz/access-tokens) of the calling process. This is not the same as granting access to everyone by assigning a **NULL** [*discretionary access control list*](/windows/win32/secauthz/dacls-and-aces) (DACL). By default, the default DACL in the access token of a process allows access only to the user represented by the access token. For information about creating a security descriptor, see [Creating a Security Descriptor](/windows/win32/secauthz/creating-a-security-descriptor-for-a-new-object-in-c--).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/wtypesbase/ns-wtypesbase-security_attributes#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is **TRUE**, the new process inherits the handle.</summary>
        </member>
    </members>
</doc>
